
Nano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028dc  080028dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028dc  080028dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028dc  080028dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028dc  080028dc  000128dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  080028f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080028f0  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008097  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000154d  00000000  00000000  000280cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00029618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  00029f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ec26  00000000  00000000  0002a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009723  00000000  00000000  00039376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bcc6  00000000  00000000  00042a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009e75f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe4  00000000  00000000  0009e7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002894 	.word	0x08002894

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002894 	.word	0x08002894

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <motorBreak>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void motorBreak()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(H_BRIDGE_IN_1_GPIO_Port, H_BRIDGE_IN_1_Pin, GPIO_PIN_RESET);
 8000224:	2380      	movs	r3, #128	; 0x80
 8000226:	021b      	lsls	r3, r3, #8
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <motorBreak+0x3c>)
 800022a:	2200      	movs	r2, #0
 800022c:	0019      	movs	r1, r3
 800022e:	f000 feb7 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_2_GPIO_Port, H_BRIDGE_IN_2_Pin, GPIO_PIN_RESET);
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <motorBreak+0x3c>)
 8000234:	2200      	movs	r2, #0
 8000236:	2120      	movs	r1, #32
 8000238:	0018      	movs	r0, r3
 800023a:	f000 feb1 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_3_GPIO_Port, H_BRIDGE_IN_3_Pin, GPIO_PIN_RESET);
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <motorBreak+0x3c>)
 8000240:	2200      	movs	r2, #0
 8000242:	2110      	movs	r1, #16
 8000244:	0018      	movs	r0, r3
 8000246:	f000 feab 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_4_GPIO_Port, H_BRIDGE_IN_4_Pin, GPIO_PIN_RESET);
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <motorBreak+0x3c>)
 800024c:	2200      	movs	r2, #0
 800024e:	2108      	movs	r1, #8
 8000250:	0018      	movs	r0, r3
 8000252:	f000 fea5 	bl	8000fa0 <HAL_GPIO_WritePin>
}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	48000400 	.word	0x48000400

08000260 <motorForward>:
void motorForward()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(H_BRIDGE_IN_1_GPIO_Port, H_BRIDGE_IN_1_Pin, GPIO_PIN_SET);
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	021b      	lsls	r3, r3, #8
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <motorForward+0x3c>)
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f000 fe97 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_2_GPIO_Port, H_BRIDGE_IN_2_Pin, GPIO_PIN_RESET);
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <motorForward+0x3c>)
 8000274:	2200      	movs	r2, #0
 8000276:	2120      	movs	r1, #32
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fe91 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_3_GPIO_Port, H_BRIDGE_IN_3_Pin, GPIO_PIN_SET);
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <motorForward+0x3c>)
 8000280:	2201      	movs	r2, #1
 8000282:	2110      	movs	r1, #16
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fe8b 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_4_GPIO_Port, H_BRIDGE_IN_4_Pin, GPIO_PIN_RESET);
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <motorForward+0x3c>)
 800028c:	2200      	movs	r2, #0
 800028e:	2108      	movs	r1, #8
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fe85 	bl	8000fa0 <HAL_GPIO_WritePin>
}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	48000400 	.word	0x48000400

080002a0 <motorRevers>:
void motorRevers()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(H_BRIDGE_IN_1_GPIO_Port, H_BRIDGE_IN_1_Pin, GPIO_PIN_RESET);
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	021b      	lsls	r3, r3, #8
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <motorRevers+0x3c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	0019      	movs	r1, r3
 80002ae:	f000 fe77 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_2_GPIO_Port, H_BRIDGE_IN_2_Pin, GPIO_PIN_SET);
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <motorRevers+0x3c>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	2120      	movs	r1, #32
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fe71 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_3_GPIO_Port, H_BRIDGE_IN_3_Pin, GPIO_PIN_RESET);
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <motorRevers+0x3c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	2110      	movs	r1, #16
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fe6b 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_4_GPIO_Port, H_BRIDGE_IN_4_Pin, GPIO_PIN_SET);
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <motorRevers+0x3c>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	2108      	movs	r1, #8
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fe65 	bl	8000fa0 <HAL_GPIO_WritePin>
}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	48000400 	.word	0x48000400

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fb86 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f82c 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 f932 	bl	8000554 <MX_GPIO_Init>
  MX_TIM3_Init();
 80002f0:	f000 f8ca 	bl	8000488 <MX_TIM3_Init>
  MX_TIM1_Init();
 80002f4:	f000 f870 	bl	80003d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <main+0x58>)
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 fb26 	bl	800194c <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <main+0x58>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2200      	movs	r2, #0
 8000306:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <main+0x5c>)
 800030a:	2100      	movs	r1, #0
 800030c:	0018      	movs	r0, r3
 800030e:	f001 fbab 	bl	8001a68 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //---MOTOR TEST---
	  motorForward();
 8000312:	f7ff ffa5 	bl	8000260 <motorForward>
	  HAL_Delay(5000);
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <main+0x60>)
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fbcf 	bl	8000abc <HAL_Delay>

	  motorRevers();
 800031e:	f7ff ffbf 	bl	80002a0 <motorRevers>
	  HAL_Delay(5000);
 8000322:	4b07      	ldr	r3, [pc, #28]	; (8000340 <main+0x60>)
 8000324:	0018      	movs	r0, r3
 8000326:	f000 fbc9 	bl	8000abc <HAL_Delay>

	  motorBreak();
 800032a:	f7ff ff79 	bl	8000220 <motorBreak>
	  HAL_Delay(5000);
 800032e:	4b04      	ldr	r3, [pc, #16]	; (8000340 <main+0x60>)
 8000330:	0018      	movs	r0, r3
 8000332:	f000 fbc3 	bl	8000abc <HAL_Delay>
	  motorForward();
 8000336:	e7ec      	b.n	8000312 <main+0x32>
 8000338:	20000028 	.word	0x20000028
 800033c:	20000070 	.word	0x20000070
 8000340:	00001388 	.word	0x00001388

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b091      	sub	sp, #68	; 0x44
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	2410      	movs	r4, #16
 800034c:	193b      	adds	r3, r7, r4
 800034e:	0018      	movs	r0, r3
 8000350:	2330      	movs	r3, #48	; 0x30
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f002 fa95 	bl	8002884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035a:	003b      	movs	r3, r7
 800035c:	0018      	movs	r0, r3
 800035e:	2310      	movs	r3, #16
 8000360:	001a      	movs	r2, r3
 8000362:	2100      	movs	r1, #0
 8000364:	f002 fa8e 	bl	8002884 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000368:	0021      	movs	r1, r4
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2202      	movs	r2, #2
 800036e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2201      	movs	r2, #1
 8000374:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2210      	movs	r2, #16
 800037a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2202      	movs	r2, #2
 8000380:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2200      	movs	r2, #0
 8000386:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	22a0      	movs	r2, #160	; 0xa0
 800038c:	0392      	lsls	r2, r2, #14
 800038e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2200      	movs	r2, #0
 8000394:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	187b      	adds	r3, r7, r1
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fe3b 	bl	8001014 <HAL_RCC_OscConfig>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003a2:	f000 fa1b 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	003b      	movs	r3, r7
 80003a8:	2207      	movs	r2, #7
 80003aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	003b      	movs	r3, r7
 80003ae:	2202      	movs	r2, #2
 80003b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	003b      	movs	r3, r7
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b8:	003b      	movs	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003be:	003b      	movs	r3, r7
 80003c0:	2101      	movs	r1, #1
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 f940 	bl	8001648 <HAL_RCC_ClockConfig>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003cc:	f000 fa06 	bl	80007dc <Error_Handler>
  }
}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b011      	add	sp, #68	; 0x44
 80003d6:	bd90      	pop	{r4, r7, pc}

080003d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003de:	2308      	movs	r3, #8
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	0018      	movs	r0, r3
 80003e4:	2310      	movs	r3, #16
 80003e6:	001a      	movs	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	f002 fa4b 	bl	8002884 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ee:	003b      	movs	r3, r7
 80003f0:	0018      	movs	r0, r3
 80003f2:	2308      	movs	r3, #8
 80003f4:	001a      	movs	r2, r3
 80003f6:	2100      	movs	r1, #0
 80003f8:	f002 fa44 	bl	8002884 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003fc:	4b1f      	ldr	r3, [pc, #124]	; (800047c <MX_TIM1_Init+0xa4>)
 80003fe:	4a20      	ldr	r2, [pc, #128]	; (8000480 <MX_TIM1_Init+0xa8>)
 8000400:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000402:	4b1e      	ldr	r3, [pc, #120]	; (800047c <MX_TIM1_Init+0xa4>)
 8000404:	222f      	movs	r2, #47	; 0x2f
 8000406:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000408:	4b1c      	ldr	r3, [pc, #112]	; (800047c <MX_TIM1_Init+0xa4>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800040e:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_TIM1_Init+0xa4>)
 8000410:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_TIM1_Init+0xac>)
 8000412:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000414:	4b19      	ldr	r3, [pc, #100]	; (800047c <MX_TIM1_Init+0xa4>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800041a:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_TIM1_Init+0xa4>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000420:	4b16      	ldr	r3, [pc, #88]	; (800047c <MX_TIM1_Init+0xa4>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_TIM1_Init+0xa4>)
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fa3f 	bl	80018ac <HAL_TIM_Base_Init>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000432:	f000 f9d3 	bl	80007dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000436:	2108      	movs	r1, #8
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	0152      	lsls	r2, r2, #5
 800043e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000440:	187a      	adds	r2, r7, r1
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_TIM1_Init+0xa4>)
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fd90 	bl	8001f6c <HAL_TIM_ConfigClockSource>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000450:	f000 f9c4 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000454:	003b      	movs	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045a:	003b      	movs	r3, r7
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000460:	003a      	movs	r2, r7
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_TIM1_Init+0xa4>)
 8000464:	0011      	movs	r1, r2
 8000466:	0018      	movs	r0, r3
 8000468:	f002 f986 	bl	8002778 <HAL_TIMEx_MasterConfigSynchronization>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000470:	f000 f9b4 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b006      	add	sp, #24
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000028 	.word	0x20000028
 8000480:	40012c00 	.word	0x40012c00
 8000484:	0000ffff 	.word	0x0000ffff

08000488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048e:	2320      	movs	r3, #32
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	0018      	movs	r0, r3
 8000494:	2308      	movs	r3, #8
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f002 f9f3 	bl	8002884 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	0018      	movs	r0, r3
 80004a2:	231c      	movs	r3, #28
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f002 f9ec 	bl	8002884 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ac:	4b24      	ldr	r3, [pc, #144]	; (8000540 <MX_TIM3_Init+0xb8>)
 80004ae:	4a25      	ldr	r2, [pc, #148]	; (8000544 <MX_TIM3_Init+0xbc>)
 80004b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1262;
 80004b2:	4b23      	ldr	r3, [pc, #140]	; (8000540 <MX_TIM3_Init+0xb8>)
 80004b4:	4a24      	ldr	r2, [pc, #144]	; (8000548 <MX_TIM3_Init+0xc0>)
 80004b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	4b21      	ldr	r3, [pc, #132]	; (8000540 <MX_TIM3_Init+0xb8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004be:	4b20      	ldr	r3, [pc, #128]	; (8000540 <MX_TIM3_Init+0xb8>)
 80004c0:	4a22      	ldr	r2, [pc, #136]	; (800054c <MX_TIM3_Init+0xc4>)
 80004c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c4:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <MX_TIM3_Init+0xb8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ca:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <MX_TIM3_Init+0xb8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <MX_TIM3_Init+0xb8>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fa78 	bl	80019c8 <HAL_TIM_PWM_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80004dc:	f000 f97e 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	2120      	movs	r1, #32
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004ee:	187a      	adds	r2, r7, r1
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <MX_TIM3_Init+0xb8>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 f93f 	bl	8002778 <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80004fe:	f000 f96d 	bl	80007dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2260      	movs	r2, #96	; 0x60
 8000506:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 19000;
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <MX_TIM3_Init+0xc8>)
 800050c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800051a:	1d39      	adds	r1, r7, #4
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_TIM3_Init+0xb8>)
 800051e:	2200      	movs	r2, #0
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fc5d 	bl	8001de0 <HAL_TIM_PWM_ConfigChannel>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800052a:	f000 f957 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <MX_TIM3_Init+0xb8>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 f9c3 	bl	80008bc <HAL_TIM_MspPostInit>

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b00a      	add	sp, #40	; 0x28
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	20000070 	.word	0x20000070
 8000544:	40000400 	.word	0x40000400
 8000548:	000004ee 	.word	0x000004ee
 800054c:	0000ffff 	.word	0x0000ffff
 8000550:	00004a38 	.word	0x00004a38

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	240c      	movs	r4, #12
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2314      	movs	r3, #20
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f002 f98d 	bl	8002884 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056a:	4b57      	ldr	r3, [pc, #348]	; (80006c8 <MX_GPIO_Init+0x174>)
 800056c:	695a      	ldr	r2, [r3, #20]
 800056e:	4b56      	ldr	r3, [pc, #344]	; (80006c8 <MX_GPIO_Init+0x174>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	03c9      	lsls	r1, r1, #15
 8000574:	430a      	orrs	r2, r1
 8000576:	615a      	str	r2, [r3, #20]
 8000578:	4b53      	ldr	r3, [pc, #332]	; (80006c8 <MX_GPIO_Init+0x174>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	03db      	lsls	r3, r3, #15
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b50      	ldr	r3, [pc, #320]	; (80006c8 <MX_GPIO_Init+0x174>)
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	4b4f      	ldr	r3, [pc, #316]	; (80006c8 <MX_GPIO_Init+0x174>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	0289      	lsls	r1, r1, #10
 8000590:	430a      	orrs	r2, r1
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	4b4c      	ldr	r3, [pc, #304]	; (80006c8 <MX_GPIO_Init+0x174>)
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	029b      	lsls	r3, r3, #10
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b49      	ldr	r3, [pc, #292]	; (80006c8 <MX_GPIO_Init+0x174>)
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <MX_GPIO_Init+0x174>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	02c9      	lsls	r1, r1, #11
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <MX_GPIO_Init+0x174>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	02db      	lsls	r3, r3, #11
 80005b8:	4013      	ands	r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, H_BRIDGE_FL_1_Pin|H_BRIDGE_FL_2_Pin, GPIO_PIN_SET);
 80005be:	2390      	movs	r3, #144	; 0x90
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	2201      	movs	r2, #1
 80005c4:	2103      	movs	r1, #3
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 fcea 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|LED_1_Pin|H_BRIDGE_SLEEP_Pin
 80005cc:	493f      	ldr	r1, [pc, #252]	; (80006cc <MX_GPIO_Init+0x178>)
 80005ce:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <MX_GPIO_Init+0x17c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fce4 	bl	8000fa0 <HAL_GPIO_WritePin>
                          |H_BRIDGE_IN_1_Pin|H_BRIDGE_IN_4_Pin|H_BRIDGE_IN_3_Pin|H_BRIDGE_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : H_BRIDGE_FL_1_Pin H_BRIDGE_FL_2_Pin */
  GPIO_InitStruct.Pin = H_BRIDGE_FL_1_Pin|H_BRIDGE_FL_2_Pin;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2203      	movs	r2, #3
 80005dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2201      	movs	r2, #1
 80005e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	193a      	adds	r2, r7, r4
 80005f2:	2390      	movs	r3, #144	; 0x90
 80005f4:	05db      	lsls	r3, r3, #23
 80005f6:	0011      	movs	r1, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 fb61 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_SENSOR_1_Pin BUTTON_2_Pin SENSOR_1_Pin SENSOR_2_Pin */
  GPIO_InitStruct.Pin = LINE_SENSOR_1_Pin|BUTTON_2_Pin|SENSOR_1_Pin|SENSOR_2_Pin;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	223c      	movs	r2, #60	; 0x3c
 8000602:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	193a      	adds	r2, r7, r4
 8000612:	2390      	movs	r3, #144	; 0x90
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f000 fb51 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_3_Pin BUTTON_1_Pin LINE_SENSOR_2_Pin */
  GPIO_InitStruct.Pin = SENSOR_3_Pin|BUTTON_1_Pin|LINE_SENSOR_2_Pin;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	4a2c      	ldr	r2, [pc, #176]	; (80006d4 <MX_GPIO_Init+0x180>)
 8000622:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000630:	193b      	adds	r3, r7, r4
 8000632:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <MX_GPIO_Init+0x17c>)
 8000634:	0019      	movs	r1, r3
 8000636:	0010      	movs	r0, r2
 8000638:	f000 fb42 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin H_BRIDGE_SLEEP_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|H_BRIDGE_SLEEP_Pin;
 800063c:	0021      	movs	r1, r4
 800063e:	187b      	adds	r3, r7, r1
 8000640:	22d8      	movs	r2, #216	; 0xd8
 8000642:	01d2      	lsls	r2, r2, #7
 8000644:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	000c      	movs	r4, r1
 8000648:	193b      	adds	r3, r7, r4
 800064a:	2201      	movs	r2, #1
 800064c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	193b      	adds	r3, r7, r4
 800065c:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <MX_GPIO_Init+0x17c>)
 800065e:	0019      	movs	r1, r3
 8000660:	0010      	movs	r0, r2
 8000662:	f000 fb2d 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : H_BRIDGE_IN_1_Pin H_BRIDGE_IN_4_Pin H_BRIDGE_IN_3_Pin H_BRIDGE_IN_2_Pin */
  GPIO_InitStruct.Pin = H_BRIDGE_IN_1_Pin|H_BRIDGE_IN_4_Pin|H_BRIDGE_IN_3_Pin|H_BRIDGE_IN_2_Pin;
 8000666:	193b      	adds	r3, r7, r4
 8000668:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <MX_GPIO_Init+0x184>)
 800066a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2201      	movs	r2, #1
 8000670:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2203      	movs	r2, #3
 800067c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	193b      	adds	r3, r7, r4
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <MX_GPIO_Init+0x17c>)
 8000682:	0019      	movs	r1, r3
 8000684:	0010      	movs	r0, r2
 8000686:	f000 fb1b 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STARTER_Pin */
  GPIO_InitStruct.Pin = STARTER_Pin;
 800068a:	0021      	movs	r1, r4
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	0052      	lsls	r2, r2, #1
 8000692:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2284      	movs	r2, #132	; 0x84
 8000698:	0392      	lsls	r2, r2, #14
 800069a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(STARTER_GPIO_Port, &GPIO_InitStruct);
 80006a2:	187a      	adds	r2, r7, r1
 80006a4:	2390      	movs	r3, #144	; 0x90
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fb08 	bl	8000cc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	2007      	movs	r0, #7
 80006b6:	f000 fad1 	bl	8000c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006ba:	2007      	movs	r0, #7
 80006bc:	f000 fae3 	bl	8000c86 <HAL_NVIC_EnableIRQ>

}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b009      	add	sp, #36	; 0x24
 80006c6:	bd90      	pop	{r4, r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	0000ec38 	.word	0x0000ec38
 80006d0:	48000400 	.word	0x48000400
 80006d4:	00001003 	.word	0x00001003
 80006d8:	00008038 	.word	0x00008038

080006dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	0002      	movs	r2, r0
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == STARTER_Pin)
 80006e8:	1dbb      	adds	r3, r7, #6
 80006ea:	881a      	ldrh	r2, [r3, #0]
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d161      	bne.n	80007b8 <HAL_GPIO_EXTI_Callback+0xdc>
  {
    if (__HAL_TIM_GET_COUNTER(&htim1) > 8000)
 80006f4:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006fa:	23fa      	movs	r3, #250	; 0xfa
 80006fc:	015b      	lsls	r3, r3, #5
 80006fe:	429a      	cmp	r2, r3
 8000700:	d906      	bls.n	8000710 <HAL_GPIO_EXTI_Callback+0x34>
    {
      tempCode = 0;
 8000702:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
      bitIndex = 0;
 8000708:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xec>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	e031      	b.n	8000774 <HAL_GPIO_EXTI_Callback+0x98>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim1) > 1700)
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	4a2d      	ldr	r2, [pc, #180]	; (80007cc <HAL_GPIO_EXTI_Callback+0xf0>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d912      	bls.n	8000742 <HAL_GPIO_EXTI_Callback+0x66>
    {
      tempCode |= (1UL << (31-bitIndex));   // write 1
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xec>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	001a      	movs	r2, r3
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	061b      	lsls	r3, r3, #24
 8000726:	40d3      	lsrs	r3, r2
 8000728:	001a      	movs	r2, r3
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	431a      	orrs	r2, r3
 8000730:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000732:	601a      	str	r2, [r3, #0]
      bitIndex++;
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xec>)
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	e018      	b.n	8000774 <HAL_GPIO_EXTI_Callback+0x98>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim1) > 1000)
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000748:	23fa      	movs	r3, #250	; 0xfa
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	429a      	cmp	r2, r3
 800074e:	d911      	bls.n	8000774 <HAL_GPIO_EXTI_Callback+0x98>
    {
      tempCode &= ~(1UL << (31-bitIndex));  // write 0
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	001a      	movs	r2, r3
 8000756:	2380      	movs	r3, #128	; 0x80
 8000758:	061b      	lsls	r3, r3, #24
 800075a:	40d3      	lsrs	r3, r2
 800075c:	43da      	mvns	r2, r3
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	401a      	ands	r2, r3
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000766:	601a      	str	r2, [r3, #0]
      bitIndex++;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xec>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000772:	701a      	strb	r2, [r3, #0]
    }
    if(bitIndex == 32)
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b20      	cmp	r3, #32
 800077a:	d119      	bne.n	80007b0 <HAL_GPIO_EXTI_Callback+0xd4>
    {
      cmdli = ~tempCode; // Logical inverted last 8 bits
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	43db      	mvns	r3, r3
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000788:	701a      	strb	r2, [r3, #0]
      cmd = tempCode >> 8; // Second last 8 bits
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000794:	701a      	strb	r2, [r3, #0]
      if(cmdli == cmd) // Check for errors
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d103      	bne.n	80007aa <HAL_GPIO_EXTI_Callback+0xce>
      {
        code = tempCode; // If no bit errors
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_GPIO_EXTI_Callback+0xfc>)
 80007a8:	601a      	str	r2, [r3, #0]
      }
      bitIndex = 0;
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xec>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
    }
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b002      	add	sp, #8
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000028 	.word	0x20000028
 80007c4:	200000b8 	.word	0x200000b8
 80007c8:	200000bc 	.word	0x200000bc
 80007cc:	000006a4 	.word	0x000006a4
 80007d0:	200000be 	.word	0x200000be
 80007d4:	200000bd 	.word	0x200000bd
 80007d8:	200000c0 	.word	0x200000c0

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x44>)
 80007f0:	699a      	ldr	r2, [r3, #24]
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_MspInit+0x44>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	430a      	orrs	r2, r1
 80007f8:	619a      	str	r2, [r3, #24]
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_MspInit+0x44>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	2201      	movs	r2, #1
 8000800:	4013      	ands	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x44>)
 8000808:	69da      	ldr	r2, [r3, #28]
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_MspInit+0x44>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	0549      	lsls	r1, r1, #21
 8000810:	430a      	orrs	r2, r1
 8000812:	61da      	str	r2, [r3, #28]
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_MspInit+0x44>)
 8000816:	69da      	ldr	r2, [r3, #28]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	055b      	lsls	r3, r3, #21
 800081c:	4013      	ands	r3, r2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <HAL_TIM_Base_MspInit+0x38>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d10d      	bne.n	800085e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_TIM_Base_MspInit+0x3c>)
 8000844:	699a      	ldr	r2, [r3, #24]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_TIM_Base_MspInit+0x3c>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	0109      	lsls	r1, r1, #4
 800084c:	430a      	orrs	r2, r1
 800084e:	619a      	str	r2, [r3, #24]
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_TIM_Base_MspInit+0x3c>)
 8000852:	699a      	ldr	r2, [r3, #24]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b004      	add	sp, #16
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	40012c00 	.word	0x40012c00
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <HAL_TIM_PWM_MspInit+0x44>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d113      	bne.n	80008aa <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_TIM_PWM_MspInit+0x48>)
 8000884:	69da      	ldr	r2, [r3, #28]
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_TIM_PWM_MspInit+0x48>)
 8000888:	2102      	movs	r1, #2
 800088a:	430a      	orrs	r2, r1
 800088c:	61da      	str	r2, [r3, #28]
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_TIM_PWM_MspInit+0x48>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	2202      	movs	r2, #2
 8000894:	4013      	ands	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2101      	movs	r1, #1
 800089e:	2010      	movs	r0, #16
 80008a0:	f000 f9dc 	bl	8000c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008a4:	2010      	movs	r0, #16
 80008a6:	f000 f9ee 	bl	8000c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b004      	add	sp, #16
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	40000400 	.word	0x40000400
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	240c      	movs	r4, #12
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	2314      	movs	r3, #20
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f001 ffd8 	bl	8002884 <memset>
  if(htim->Instance==TIM3)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <HAL_TIM_MspPostInit+0x74>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d124      	bne.n	8000928 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_TIM_MspPostInit+0x78>)
 80008e0:	695a      	ldr	r2, [r3, #20]
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_TIM_MspPostInit+0x78>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0289      	lsls	r1, r1, #10
 80008e8:	430a      	orrs	r2, r1
 80008ea:	615a      	str	r2, [r3, #20]
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_TIM_MspPostInit+0x78>)
 80008ee:	695a      	ldr	r2, [r3, #20]
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	029b      	lsls	r3, r3, #10
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008fa:	0021      	movs	r1, r4
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2240      	movs	r2, #64	; 0x40
 8000900:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2202      	movs	r2, #2
 8000906:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2201      	movs	r2, #1
 8000918:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	187a      	adds	r2, r7, r1
 800091c:	2390      	movs	r3, #144	; 0x90
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f9cc 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b009      	add	sp, #36	; 0x24
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	40000400 	.word	0x40000400
 8000934:	40021000 	.word	0x40021000

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 f892 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STARTER_Pin);
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fb34 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <TIM3_IRQHandler+0x14>)
 8000982:	0018      	movs	r0, r3
 8000984:	f001 f916 	bl	8001bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	20000070 	.word	0x20000070

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopForever+0x6>)
  ldr r1, =_edata
 80009a6:	490e      	ldr	r1, [pc, #56]	; (80009e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <LoopForever+0xe>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009bc:	4c0b      	ldr	r4, [pc, #44]	; (80009ec <LoopForever+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009ca:	f7ff ffe3 	bl	8000994 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ce:	f001 ff35 	bl	800283c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d2:	f7ff fc85 	bl	80002e0 <main>

080009d6 <LoopForever>:

LoopForever:
    b LoopForever
 80009d6:	e7fe      	b.n	80009d6 <LoopForever>
  ldr   r0, =_estack
 80009d8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e4:	080028e4 	.word	0x080028e4
  ldr r2, =_sbss
 80009e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ec:	200000c8 	.word	0x200000c8

080009f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_IRQHandler>
	...

080009f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <HAL_Init+0x24>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_Init+0x24>)
 80009fe:	2110      	movs	r1, #16
 8000a00:	430a      	orrs	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f809 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0a:	f7ff feed 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_InitTick+0x5c>)
 8000a26:	681c      	ldr	r4, [r3, #0]
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_InitTick+0x60>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	23fa      	movs	r3, #250	; 0xfa
 8000a30:	0098      	lsls	r0, r3, #2
 8000a32:	f7ff fb69 	bl	8000108 <__udivsi3>
 8000a36:	0003      	movs	r3, r0
 8000a38:	0019      	movs	r1, r3
 8000a3a:	0020      	movs	r0, r4
 8000a3c:	f7ff fb64 	bl	8000108 <__udivsi3>
 8000a40:	0003      	movs	r3, r0
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f92f 	bl	8000ca6 <HAL_SYSTICK_Config>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e00f      	b.n	8000a70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d80b      	bhi.n	8000a6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	425b      	negs	r3, r3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f8fc 	bl	8000c5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_InitTick+0x64>)
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	0018      	movs	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b003      	add	sp, #12
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_IncTick+0x1c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	18d2      	adds	r2, r2, r3
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	200000c4 	.word	0x200000c4

08000aa8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b02      	ldr	r3, [pc, #8]	; (8000ab8 <HAL_GetTick+0x10>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	200000c4 	.word	0x200000c4

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff fff0 	bl	8000aa8 <HAL_GetTick>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	d005      	beq.n	8000ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_Delay+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	001a      	movs	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	189b      	adds	r3, r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	f7ff ffe0 	bl	8000aa8 <HAL_GetTick>
 8000ae8:	0002      	movs	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8f7      	bhi.n	8000ae4 <HAL_Delay+0x28>
  {
  }
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b004      	add	sp, #16
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000008 	.word	0x20000008

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b7f      	cmp	r3, #127	; 0x7f
 8000b16:	d809      	bhi.n	8000b2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	231f      	movs	r3, #31
 8000b20:	401a      	ands	r2, r3
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_EnableIRQ+0x30>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	4091      	lsls	r1, r2
 8000b28:	000a      	movs	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]
  }
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b002      	add	sp, #8
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	0002      	movs	r2, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b4c:	d828      	bhi.n	8000ba0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4e:	4a2f      	ldr	r2, [pc, #188]	; (8000c0c <__NVIC_SetPriority+0xd4>)
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	33c0      	adds	r3, #192	; 0xc0
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	589b      	ldr	r3, [r3, r2]
 8000b5e:	1dfa      	adds	r2, r7, #7
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	0011      	movs	r1, r2
 8000b64:	2203      	movs	r2, #3
 8000b66:	400a      	ands	r2, r1
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	21ff      	movs	r1, #255	; 0xff
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	000a      	movs	r2, r1
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0018      	movs	r0, r3
 8000b84:	2303      	movs	r3, #3
 8000b86:	4003      	ands	r3, r0
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <__NVIC_SetPriority+0xd4>)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	430a      	orrs	r2, r1
 8000b98:	33c0      	adds	r3, #192	; 0xc0
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b9e:	e031      	b.n	8000c04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <__NVIC_SetPriority+0xd8>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	230f      	movs	r3, #15
 8000baa:	400b      	ands	r3, r1
 8000bac:	3b08      	subs	r3, #8
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3306      	adds	r3, #6
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1dfa      	adds	r2, r7, #7
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	21ff      	movs	r1, #255	; 0xff
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	401a      	ands	r2, r3
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4003      	ands	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <__NVIC_SetPriority+0xd8>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	001c      	movs	r4, r3
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	4023      	ands	r3, r4
 8000bf4:	3b08      	subs	r3, #8
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	3306      	adds	r3, #6
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	18c3      	adds	r3, r0, r3
 8000c00:	3304      	adds	r3, #4
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	045b      	lsls	r3, r3, #17
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d301      	bcc.n	8000c2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e010      	b.n	8000c4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <SysTick_Config+0x44>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	3a01      	subs	r2, #1
 8000c32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c34:	2301      	movs	r3, #1
 8000c36:	425b      	negs	r3, r3
 8000c38:	2103      	movs	r1, #3
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff ff7c 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SysTick_Config+0x44>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SysTick_Config+0x44>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	210f      	movs	r1, #15
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	1c02      	adds	r2, r0, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff ff33 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff ffaf 	bl	8000c14 <SysTick_Config>
 8000cb6:	0003      	movs	r3, r0
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e14f      	b.n	8000f70 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d100      	bne.n	8000ce8 <HAL_GPIO_Init+0x28>
 8000ce6:	e140      	b.n	8000f6a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d005      	beq.n	8000d00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d130      	bne.n	8000d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	0013      	movs	r3, r2
 8000d10:	43da      	mvns	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	409a      	lsls	r2, r3
 8000d22:	0013      	movs	r3, r2
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d36:	2201      	movs	r2, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2203      	movs	r2, #3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d017      	beq.n	8000d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d123      	bne.n	8000df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	58d3      	ldr	r3, [r2, r3]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2207      	movs	r2, #7
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	6939      	ldr	r1, [r7, #16]
 8000df0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	401a      	ands	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	23c0      	movs	r3, #192	; 0xc0
 8000e2c:	029b      	lsls	r3, r3, #10
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d100      	bne.n	8000e34 <HAL_GPIO_Init+0x174>
 8000e32:	e09a      	b.n	8000f6a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e36:	699a      	ldr	r2, [r3, #24]
 8000e38:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	619a      	str	r2, [r3, #24]
 8000e40:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	2201      	movs	r2, #1
 8000e46:	4013      	ands	r3, r2
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e4c:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <HAL_GPIO_Init+0x2cc>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	589b      	ldr	r3, [r3, r2]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4013      	ands	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	2390      	movs	r3, #144	; 0x90
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x1e2>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x1de>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a43      	ldr	r2, [pc, #268]	; (8000f94 <HAL_GPIO_Init+0x2d4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x1da>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a42      	ldr	r2, [pc, #264]	; (8000f98 <HAL_GPIO_Init+0x2d8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x1d6>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eb4:	4935      	ldr	r1, [pc, #212]	; (8000f8c <HAL_GPIO_Init+0x2cc>)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec2:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	025b      	lsls	r3, r3, #9
 8000eda:	4013      	ands	r3, r2
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	029b      	lsls	r3, r3, #10
 8000f04:	4013      	ands	r3, r2
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	035b      	lsls	r3, r3, #13
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43da      	mvns	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	039b      	lsls	r3, r3, #14
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	40da      	lsrs	r2, r3
 8000f78:	1e13      	subs	r3, r2, #0
 8000f7a:	d000      	beq.n	8000f7e <HAL_GPIO_Init+0x2be>
 8000f7c:	e6a8      	b.n	8000cd0 <HAL_GPIO_Init+0x10>
  } 
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b006      	add	sp, #24
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000c00 	.word	0x48000c00
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	0008      	movs	r0, r1
 8000faa:	0011      	movs	r1, r2
 8000fac:	1cbb      	adds	r3, r7, #2
 8000fae:	1c02      	adds	r2, r0, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
 8000fb2:	1c7b      	adds	r3, r7, #1
 8000fb4:	1c0a      	adds	r2, r1, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb8:	1c7b      	adds	r3, r7, #1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc0:	1cbb      	adds	r3, r7, #2
 8000fc2:	881a      	ldrh	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc8:	e003      	b.n	8000fd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fca:	1cbb      	adds	r3, r7, #2
 8000fcc:	881a      	ldrh	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	1dba      	adds	r2, r7, #6
 8000fee:	8812      	ldrh	r2, [r2, #0]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d008      	beq.n	8001006 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000ff6:	1dba      	adds	r2, r7, #6
 8000ff8:	8812      	ldrh	r2, [r2, #0]
 8000ffa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff fb6b 	bl	80006dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e301      	b.n	800162a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2201      	movs	r2, #1
 800102c:	4013      	ands	r3, r2
 800102e:	d100      	bne.n	8001032 <HAL_RCC_OscConfig+0x1e>
 8001030:	e08d      	b.n	800114e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001032:	4bc3      	ldr	r3, [pc, #780]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	220c      	movs	r2, #12
 8001038:	4013      	ands	r3, r2
 800103a:	2b04      	cmp	r3, #4
 800103c:	d00e      	beq.n	800105c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800103e:	4bc0      	ldr	r3, [pc, #768]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	220c      	movs	r2, #12
 8001044:	4013      	ands	r3, r2
 8001046:	2b08      	cmp	r3, #8
 8001048:	d116      	bne.n	8001078 <HAL_RCC_OscConfig+0x64>
 800104a:	4bbd      	ldr	r3, [pc, #756]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	025b      	lsls	r3, r3, #9
 8001052:	401a      	ands	r2, r3
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	025b      	lsls	r3, r3, #9
 8001058:	429a      	cmp	r2, r3
 800105a:	d10d      	bne.n	8001078 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	4bb8      	ldr	r3, [pc, #736]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	029b      	lsls	r3, r3, #10
 8001064:	4013      	ands	r3, r2
 8001066:	d100      	bne.n	800106a <HAL_RCC_OscConfig+0x56>
 8001068:	e070      	b.n	800114c <HAL_RCC_OscConfig+0x138>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d000      	beq.n	8001074 <HAL_RCC_OscConfig+0x60>
 8001072:	e06b      	b.n	800114c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e2d8      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d107      	bne.n	8001090 <HAL_RCC_OscConfig+0x7c>
 8001080:	4baf      	ldr	r3, [pc, #700]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4bae      	ldr	r3, [pc, #696]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	0249      	lsls	r1, r1, #9
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e02f      	b.n	80010f0 <HAL_RCC_OscConfig+0xdc>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10c      	bne.n	80010b2 <HAL_RCC_OscConfig+0x9e>
 8001098:	4ba9      	ldr	r3, [pc, #676]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4ba8      	ldr	r3, [pc, #672]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800109e:	49a9      	ldr	r1, [pc, #676]	; (8001344 <HAL_RCC_OscConfig+0x330>)
 80010a0:	400a      	ands	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	4ba6      	ldr	r3, [pc, #664]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4ba5      	ldr	r3, [pc, #660]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010aa:	49a7      	ldr	r1, [pc, #668]	; (8001348 <HAL_RCC_OscConfig+0x334>)
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e01e      	b.n	80010f0 <HAL_RCC_OscConfig+0xdc>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d10e      	bne.n	80010d8 <HAL_RCC_OscConfig+0xc4>
 80010ba:	4ba1      	ldr	r3, [pc, #644]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4ba0      	ldr	r3, [pc, #640]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	02c9      	lsls	r1, r1, #11
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	4b9d      	ldr	r3, [pc, #628]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b9c      	ldr	r3, [pc, #624]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	0249      	lsls	r1, r1, #9
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e00b      	b.n	80010f0 <HAL_RCC_OscConfig+0xdc>
 80010d8:	4b99      	ldr	r3, [pc, #612]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b98      	ldr	r3, [pc, #608]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010de:	4999      	ldr	r1, [pc, #612]	; (8001344 <HAL_RCC_OscConfig+0x330>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	4b96      	ldr	r3, [pc, #600]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b95      	ldr	r3, [pc, #596]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	4997      	ldr	r1, [pc, #604]	; (8001348 <HAL_RCC_OscConfig+0x334>)
 80010ec:	400a      	ands	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d014      	beq.n	8001122 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fcd6 	bl	8000aa8 <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001102:	f7ff fcd1 	bl	8000aa8 <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	; 0x64
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e28a      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001114:	4b8a      	ldr	r3, [pc, #552]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0xee>
 8001120:	e015      	b.n	800114e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fcc1 	bl	8000aa8 <HAL_GetTick>
 8001126:	0003      	movs	r3, r0
 8001128:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fcbc 	bl	8000aa8 <HAL_GetTick>
 8001130:	0002      	movs	r2, r0
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e275      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113e:	4b80      	ldr	r3, [pc, #512]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	029b      	lsls	r3, r3, #10
 8001146:	4013      	ands	r3, r2
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x118>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d100      	bne.n	800115a <HAL_RCC_OscConfig+0x146>
 8001158:	e069      	b.n	800122e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800115a:	4b79      	ldr	r3, [pc, #484]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	220c      	movs	r2, #12
 8001160:	4013      	ands	r3, r2
 8001162:	d00b      	beq.n	800117c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001164:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	220c      	movs	r2, #12
 800116a:	4013      	ands	r3, r2
 800116c:	2b08      	cmp	r3, #8
 800116e:	d11c      	bne.n	80011aa <HAL_RCC_OscConfig+0x196>
 8001170:	4b73      	ldr	r3, [pc, #460]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	025b      	lsls	r3, r3, #9
 8001178:	4013      	ands	r3, r2
 800117a:	d116      	bne.n	80011aa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117c:	4b70      	ldr	r3, [pc, #448]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2202      	movs	r2, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d005      	beq.n	8001192 <HAL_RCC_OscConfig+0x17e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d001      	beq.n	8001192 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e24b      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001192:	4b6b      	ldr	r3, [pc, #428]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	22f8      	movs	r2, #248	; 0xf8
 8001198:	4393      	bics	r3, r2
 800119a:	0019      	movs	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	00da      	lsls	r2, r3, #3
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a8:	e041      	b.n	800122e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d024      	beq.n	80011fc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b62      	ldr	r3, [pc, #392]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	2101      	movs	r1, #1
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fc73 	bl	8000aa8 <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc6e 	bl	8000aa8 <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e227      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011da:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2202      	movs	r2, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	d0f1      	beq.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e4:	4b56      	ldr	r3, [pc, #344]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	22f8      	movs	r2, #248	; 0xf8
 80011ea:	4393      	bics	r3, r2
 80011ec:	0019      	movs	r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	00da      	lsls	r2, r3, #3
 80011f4:	4b52      	ldr	r3, [pc, #328]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e018      	b.n	800122e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001202:	2101      	movs	r1, #1
 8001204:	438a      	bics	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fc4e 	bl	8000aa8 <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fc49 	bl	8000aa8 <HAL_GetTick>
 8001216:	0002      	movs	r2, r0
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e202      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2202      	movs	r2, #2
 800122a:	4013      	ands	r3, r2
 800122c:	d1f1      	bne.n	8001212 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2208      	movs	r2, #8
 8001234:	4013      	ands	r3, r2
 8001236:	d036      	beq.n	80012a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d019      	beq.n	8001274 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001240:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001244:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001246:	2101      	movs	r1, #1
 8001248:	430a      	orrs	r2, r1
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff fc2c 	bl	8000aa8 <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff fc27 	bl	8000aa8 <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1e0      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	2202      	movs	r2, #2
 800126e:	4013      	ands	r3, r2
 8001270:	d0f1      	beq.n	8001256 <HAL_RCC_OscConfig+0x242>
 8001272:	e018      	b.n	80012a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800127a:	2101      	movs	r1, #1
 800127c:	438a      	bics	r2, r1
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff fc12 	bl	8000aa8 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff fc0d 	bl	8000aa8 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e1c6      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d1f1      	bne.n	800128a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2204      	movs	r2, #4
 80012ac:	4013      	ands	r3, r2
 80012ae:	d100      	bne.n	80012b2 <HAL_RCC_OscConfig+0x29e>
 80012b0:	e0b4      	b.n	800141c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b2:	201f      	movs	r0, #31
 80012b4:	183b      	adds	r3, r7, r0
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80012bc:	69da      	ldr	r2, [r3, #28]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	055b      	lsls	r3, r3, #21
 80012c2:	4013      	ands	r3, r2
 80012c4:	d110      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80012c8:	69da      	ldr	r2, [r3, #28]
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	2180      	movs	r1, #128	; 0x80
 80012ce:	0549      	lsls	r1, r1, #21
 80012d0:	430a      	orrs	r2, r1
 80012d2:	61da      	str	r2, [r3, #28]
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	69da      	ldr	r2, [r3, #28]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	055b      	lsls	r3, r3, #21
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012e2:	183b      	adds	r3, r7, r0
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_RCC_OscConfig+0x338>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	d11a      	bne.n	800132a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_RCC_OscConfig+0x338>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_RCC_OscConfig+0x338>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	0049      	lsls	r1, r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff fbd1 	bl	8000aa8 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130c:	f7ff fbcc 	bl	8000aa8 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e185      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_OscConfig+0x338>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4013      	ands	r3, r2
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10e      	bne.n	8001350 <HAL_RCC_OscConfig+0x33c>
 8001332:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001334:	6a1a      	ldr	r2, [r3, #32]
 8001336:	4b02      	ldr	r3, [pc, #8]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001338:	2101      	movs	r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	621a      	str	r2, [r3, #32]
 800133e:	e035      	b.n	80013ac <HAL_RCC_OscConfig+0x398>
 8001340:	40021000 	.word	0x40021000
 8001344:	fffeffff 	.word	0xfffeffff
 8001348:	fffbffff 	.word	0xfffbffff
 800134c:	40007000 	.word	0x40007000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10c      	bne.n	8001372 <HAL_RCC_OscConfig+0x35e>
 8001358:	4bb6      	ldr	r3, [pc, #728]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800135a:	6a1a      	ldr	r2, [r3, #32]
 800135c:	4bb5      	ldr	r3, [pc, #724]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800135e:	2101      	movs	r1, #1
 8001360:	438a      	bics	r2, r1
 8001362:	621a      	str	r2, [r3, #32]
 8001364:	4bb3      	ldr	r3, [pc, #716]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	4bb2      	ldr	r3, [pc, #712]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800136a:	2104      	movs	r1, #4
 800136c:	438a      	bics	r2, r1
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	e01c      	b.n	80013ac <HAL_RCC_OscConfig+0x398>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b05      	cmp	r3, #5
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x380>
 800137a:	4bae      	ldr	r3, [pc, #696]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800137c:	6a1a      	ldr	r2, [r3, #32]
 800137e:	4bad      	ldr	r3, [pc, #692]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001380:	2104      	movs	r1, #4
 8001382:	430a      	orrs	r2, r1
 8001384:	621a      	str	r2, [r3, #32]
 8001386:	4bab      	ldr	r3, [pc, #684]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001388:	6a1a      	ldr	r2, [r3, #32]
 800138a:	4baa      	ldr	r3, [pc, #680]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800138c:	2101      	movs	r1, #1
 800138e:	430a      	orrs	r2, r1
 8001390:	621a      	str	r2, [r3, #32]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0x398>
 8001394:	4ba7      	ldr	r3, [pc, #668]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	4ba6      	ldr	r3, [pc, #664]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800139a:	2101      	movs	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	621a      	str	r2, [r3, #32]
 80013a0:	4ba4      	ldr	r3, [pc, #656]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	4ba3      	ldr	r3, [pc, #652]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80013a6:	2104      	movs	r1, #4
 80013a8:	438a      	bics	r2, r1
 80013aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d014      	beq.n	80013de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b4:	f7ff fb78 	bl	8000aa8 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	e009      	b.n	80013d2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fb73 	bl	8000aa8 <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a9b      	ldr	r2, [pc, #620]	; (8001638 <HAL_RCC_OscConfig+0x624>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e12b      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d2:	4b98      	ldr	r3, [pc, #608]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x3aa>
 80013dc:	e013      	b.n	8001406 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fb63 	bl	8000aa8 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	e009      	b.n	80013fc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff fb5e 	bl	8000aa8 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	4a91      	ldr	r2, [pc, #580]	; (8001638 <HAL_RCC_OscConfig+0x624>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e116      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fc:	4b8d      	ldr	r3, [pc, #564]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001406:	231f      	movs	r3, #31
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001410:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001412:	69da      	ldr	r2, [r3, #28]
 8001414:	4b87      	ldr	r3, [pc, #540]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001416:	4989      	ldr	r1, [pc, #548]	; (800163c <HAL_RCC_OscConfig+0x628>)
 8001418:	400a      	ands	r2, r1
 800141a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2210      	movs	r2, #16
 8001422:	4013      	ands	r3, r2
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d12a      	bne.n	8001484 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800142e:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001432:	4b80      	ldr	r3, [pc, #512]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001434:	2104      	movs	r1, #4
 8001436:	430a      	orrs	r2, r1
 8001438:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800143a:	4b7e      	ldr	r3, [pc, #504]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800143c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143e:	4b7d      	ldr	r3, [pc, #500]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001440:	2101      	movs	r1, #1
 8001442:	430a      	orrs	r2, r1
 8001444:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fb2f 	bl	8000aa8 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001450:	f7ff fb2a 	bl	8000aa8 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0e3      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001462:	4b74      	ldr	r3, [pc, #464]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d0f1      	beq.n	8001450 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800146c:	4b71      	ldr	r3, [pc, #452]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	22f8      	movs	r2, #248	; 0xf8
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	00da      	lsls	r2, r3, #3
 800147c:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
 8001482:	e034      	b.n	80014ee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	3305      	adds	r3, #5
 800148a:	d111      	bne.n	80014b0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800148c:	4b69      	ldr	r3, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800148e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001490:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001492:	2104      	movs	r1, #4
 8001494:	438a      	bics	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800149a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149c:	22f8      	movs	r2, #248	; 0xf8
 800149e:	4393      	bics	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	00da      	lsls	r2, r3, #3
 80014a8:	4b62      	ldr	r3, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014aa:	430a      	orrs	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
 80014ae:	e01e      	b.n	80014ee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014b0:	4b60      	ldr	r3, [pc, #384]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b4:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	430a      	orrs	r2, r1
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014bc:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c0:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	438a      	bics	r2, r1
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff faee 	bl	8000aa8 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014d2:	f7ff fae9 	bl	8000aa8 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e0a2      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014e4:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d1f1      	bne.n	80014d2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4e4>
 80014f6:	e097      	b.n	8001628 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f8:	4b4e      	ldr	r3, [pc, #312]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	220c      	movs	r2, #12
 80014fe:	4013      	ands	r3, r2
 8001500:	2b08      	cmp	r3, #8
 8001502:	d100      	bne.n	8001506 <HAL_RCC_OscConfig+0x4f2>
 8001504:	e06b      	b.n	80015de <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d14c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b48      	ldr	r3, [pc, #288]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001514:	494a      	ldr	r1, [pc, #296]	; (8001640 <HAL_RCC_OscConfig+0x62c>)
 8001516:	400a      	ands	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fac5 	bl	8000aa8 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001524:	f7ff fac0 	bl	8000aa8 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e079      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	049b      	lsls	r3, r3, #18
 800153e:	4013      	ands	r3, r2
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	220f      	movs	r2, #15
 8001548:	4393      	bics	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001552:	430a      	orrs	r2, r1
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <HAL_RCC_OscConfig+0x630>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	431a      	orrs	r2, r3
 800156a:	4b32      	ldr	r3, [pc, #200]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800156c:	430a      	orrs	r2, r1
 800156e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001570:	4b30      	ldr	r3, [pc, #192]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	0449      	lsls	r1, r1, #17
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fa93 	bl	8000aa8 <HAL_GetTick>
 8001582:	0003      	movs	r3, r0
 8001584:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff fa8e 	bl	8000aa8 <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e047      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	049b      	lsls	r3, r3, #18
 80015a2:	4013      	ands	r3, r2
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x574>
 80015a6:	e03f      	b.n	8001628 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80015ae:	4924      	ldr	r1, [pc, #144]	; (8001640 <HAL_RCC_OscConfig+0x62c>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fa78 	bl	8000aa8 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff fa73 	bl	8000aa8 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e02c      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	049b      	lsls	r3, r3, #18
 80015d8:	4013      	ands	r3, r2
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x5aa>
 80015dc:	e024      	b.n	8001628 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e01f      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	401a      	ands	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	429a      	cmp	r2, r3
 8001604:	d10e      	bne.n	8001624 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	220f      	movs	r2, #15
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	23f0      	movs	r3, #240	; 0xf0
 8001618:	039b      	lsls	r3, r3, #14
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b008      	add	sp, #32
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	40021000 	.word	0x40021000
 8001638:	00001388 	.word	0x00001388
 800163c:	efffffff 	.word	0xefffffff
 8001640:	feffffff 	.word	0xfeffffff
 8001644:	ffc2ffff 	.word	0xffc2ffff

08001648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b3      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	4013      	ands	r3, r2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d911      	bls.n	800168e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b58      	ldr	r3, [pc, #352]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2201      	movs	r2, #1
 8001670:	4393      	bics	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d001      	beq.n	800168e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e09a      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2202      	movs	r2, #2
 8001694:	4013      	ands	r3, r2
 8001696:	d015      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2204      	movs	r2, #4
 800169e:	4013      	ands	r3, r2
 80016a0:	d006      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016a8:	21e0      	movs	r1, #224	; 0xe0
 80016aa:	00c9      	lsls	r1, r1, #3
 80016ac:	430a      	orrs	r2, r1
 80016ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	22f0      	movs	r2, #240	; 0xf0
 80016b6:	4393      	bics	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016c0:	430a      	orrs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	d040      	beq.n	8001750 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	029b      	lsls	r3, r3, #10
 80016de:	4013      	ands	r3, r2
 80016e0:	d114      	bne.n	800170c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e06e      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	049b      	lsls	r3, r3, #18
 80016f6:	4013      	ands	r3, r2
 80016f8:	d108      	bne.n	800170c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e062      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e05b      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2203      	movs	r2, #3
 8001712:	4393      	bics	r3, r2
 8001714:	0019      	movs	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800171c:	430a      	orrs	r2, r1
 800171e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff f9c2 	bl	8000aa8 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001728:	e009      	b.n	800173e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172a:	f7ff f9bd 	bl	8000aa8 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <HAL_RCC_ClockConfig+0x18c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e042      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	220c      	movs	r2, #12
 8001744:	401a      	ands	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1ec      	bne.n	800172a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d211      	bcs.n	8001782 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	4393      	bics	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e020      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2204      	movs	r2, #4
 8001788:	4013      	ands	r3, r2
 800178a:	d009      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_RCC_ClockConfig+0x190>)
 8001792:	4013      	ands	r3, r2
 8001794:	0019      	movs	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017a0:	f000 f820 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80017a4:	0001      	movs	r1, r0
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	220f      	movs	r2, #15
 80017ae:	4013      	ands	r3, r2
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_RCC_ClockConfig+0x194>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	000a      	movs	r2, r1
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_RCC_ClockConfig+0x198>)
 80017ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017bc:	2003      	movs	r0, #3
 80017be:	f7ff f92d 	bl	8000a1c <HAL_InitTick>
  
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b004      	add	sp, #16
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40022000 	.word	0x40022000
 80017d0:	40021000 	.word	0x40021000
 80017d4:	00001388 	.word	0x00001388
 80017d8:	fffff8ff 	.word	0xfffff8ff
 80017dc:	080028cc 	.word	0x080028cc
 80017e0:	20000000 	.word	0x20000000

080017e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b08f      	sub	sp, #60	; 0x3c
 80017e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017ea:	2314      	movs	r3, #20
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	4a2b      	ldr	r2, [pc, #172]	; (800189c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017f2:	c313      	stmia	r3!, {r0, r1, r4}
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4a29      	ldr	r2, [pc, #164]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	220c      	movs	r2, #12
 8001822:	4013      	ands	r3, r2
 8001824:	2b04      	cmp	r3, #4
 8001826:	d002      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x4a>
 8001828:	2b08      	cmp	r3, #8
 800182a:	d003      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x50>
 800182c:	e02d      	b.n	800188a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001832:	e02d      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001836:	0c9b      	lsrs	r3, r3, #18
 8001838:	220f      	movs	r2, #15
 800183a:	4013      	ands	r3, r2
 800183c:	2214      	movs	r2, #20
 800183e:	18ba      	adds	r2, r7, r2
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	220f      	movs	r2, #15
 800184a:	4013      	ands	r3, r2
 800184c:	1d3a      	adds	r2, r7, #4
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	4013      	ands	r3, r2
 800185a:	d009      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800185c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800185e:	4812      	ldr	r0, [pc, #72]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001860:	f7fe fc52 	bl	8000108 <__udivsi3>
 8001864:	0003      	movs	r3, r0
 8001866:	001a      	movs	r2, r3
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	4353      	muls	r3, r2
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
 800186e:	e009      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001872:	000a      	movs	r2, r1
 8001874:	0152      	lsls	r2, r2, #5
 8001876:	1a52      	subs	r2, r2, r1
 8001878:	0193      	lsls	r3, r2, #6
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	185b      	adds	r3, r3, r1
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001888:	e002      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800188e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b00f      	add	sp, #60	; 0x3c
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	080028ac 	.word	0x080028ac
 80018a0:	080028bc 	.word	0x080028bc
 80018a4:	40021000 	.word	0x40021000
 80018a8:	007a1200 	.word	0x007a1200

080018ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e042      	b.n	8001944 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	223d      	movs	r2, #61	; 0x3d
 80018c2:	5c9b      	ldrb	r3, [r3, r2]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d107      	bne.n	80018da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	223c      	movs	r2, #60	; 0x3c
 80018ce:	2100      	movs	r1, #0
 80018d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7fe ffab 	bl	8000830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	223d      	movs	r2, #61	; 0x3d
 80018de:	2102      	movs	r1, #2
 80018e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	0019      	movs	r1, r3
 80018ec:	0010      	movs	r0, r2
 80018ee:	f000 fc39 	bl	8002164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2246      	movs	r2, #70	; 0x46
 80018f6:	2101      	movs	r1, #1
 80018f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	223e      	movs	r2, #62	; 0x3e
 80018fe:	2101      	movs	r1, #1
 8001900:	5499      	strb	r1, [r3, r2]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	223f      	movs	r2, #63	; 0x3f
 8001906:	2101      	movs	r1, #1
 8001908:	5499      	strb	r1, [r3, r2]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2240      	movs	r2, #64	; 0x40
 800190e:	2101      	movs	r1, #1
 8001910:	5499      	strb	r1, [r3, r2]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2241      	movs	r2, #65	; 0x41
 8001916:	2101      	movs	r1, #1
 8001918:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2242      	movs	r2, #66	; 0x42
 800191e:	2101      	movs	r1, #1
 8001920:	5499      	strb	r1, [r3, r2]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2243      	movs	r2, #67	; 0x43
 8001926:	2101      	movs	r1, #1
 8001928:	5499      	strb	r1, [r3, r2]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2244      	movs	r2, #68	; 0x44
 800192e:	2101      	movs	r1, #1
 8001930:	5499      	strb	r1, [r3, r2]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2245      	movs	r2, #69	; 0x45
 8001936:	2101      	movs	r1, #1
 8001938:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	223d      	movs	r2, #61	; 0x3d
 800193e:	2101      	movs	r1, #1
 8001940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	223d      	movs	r2, #61	; 0x3d
 8001958:	5c9b      	ldrb	r3, [r3, r2]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d001      	beq.n	8001964 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e028      	b.n	80019b6 <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	223d      	movs	r2, #61	; 0x3d
 8001968:	2102      	movs	r1, #2
 800196a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <HAL_TIM_Base_Start+0x74>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d004      	beq.n	8001980 <HAL_TIM_Base_Start+0x34>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_TIM_Base_Start+0x78>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d111      	bne.n	80019a4 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2207      	movs	r2, #7
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d010      	beq.n	80019b4 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2101      	movs	r1, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a2:	e007      	b.n	80019b4 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2101      	movs	r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b004      	add	sp, #16
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40000400 	.word	0x40000400

080019c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e042      	b.n	8001a60 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	223d      	movs	r2, #61	; 0x3d
 80019de:	5c9b      	ldrb	r3, [r3, r2]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d107      	bne.n	80019f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	223c      	movs	r2, #60	; 0x3c
 80019ea:	2100      	movs	r1, #0
 80019ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7fe ff3d 	bl	8000870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	223d      	movs	r2, #61	; 0x3d
 80019fa:	2102      	movs	r1, #2
 80019fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3304      	adds	r3, #4
 8001a06:	0019      	movs	r1, r3
 8001a08:	0010      	movs	r0, r2
 8001a0a:	f000 fbab 	bl	8002164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2246      	movs	r2, #70	; 0x46
 8001a12:	2101      	movs	r1, #1
 8001a14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	223e      	movs	r2, #62	; 0x3e
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	5499      	strb	r1, [r3, r2]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	223f      	movs	r2, #63	; 0x3f
 8001a22:	2101      	movs	r1, #1
 8001a24:	5499      	strb	r1, [r3, r2]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2240      	movs	r2, #64	; 0x40
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	5499      	strb	r1, [r3, r2]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2241      	movs	r2, #65	; 0x41
 8001a32:	2101      	movs	r1, #1
 8001a34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2242      	movs	r2, #66	; 0x42
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	5499      	strb	r1, [r3, r2]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2243      	movs	r2, #67	; 0x43
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2244      	movs	r2, #68	; 0x44
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2245      	movs	r2, #69	; 0x45
 8001a52:	2101      	movs	r1, #1
 8001a54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	223d      	movs	r2, #61	; 0x3d
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d108      	bne.n	8001a8a <HAL_TIM_PWM_Start+0x22>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	223e      	movs	r2, #62	; 0x3e
 8001a7c:	5c9b      	ldrb	r3, [r3, r2]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	1e5a      	subs	r2, r3, #1
 8001a84:	4193      	sbcs	r3, r2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	e01f      	b.n	8001aca <HAL_TIM_PWM_Start+0x62>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d108      	bne.n	8001aa2 <HAL_TIM_PWM_Start+0x3a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	223f      	movs	r2, #63	; 0x3f
 8001a94:	5c9b      	ldrb	r3, [r3, r2]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	1e5a      	subs	r2, r3, #1
 8001a9c:	4193      	sbcs	r3, r2
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	e013      	b.n	8001aca <HAL_TIM_PWM_Start+0x62>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d108      	bne.n	8001aba <HAL_TIM_PWM_Start+0x52>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2240      	movs	r2, #64	; 0x40
 8001aac:	5c9b      	ldrb	r3, [r3, r2]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	1e5a      	subs	r2, r3, #1
 8001ab4:	4193      	sbcs	r3, r2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	e007      	b.n	8001aca <HAL_TIM_PWM_Start+0x62>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2241      	movs	r2, #65	; 0x41
 8001abe:	5c9b      	ldrb	r3, [r3, r2]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	1e5a      	subs	r2, r3, #1
 8001ac6:	4193      	sbcs	r3, r2
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e064      	b.n	8001b9c <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d104      	bne.n	8001ae2 <HAL_TIM_PWM_Start+0x7a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	223e      	movs	r2, #62	; 0x3e
 8001adc:	2102      	movs	r1, #2
 8001ade:	5499      	strb	r1, [r3, r2]
 8001ae0:	e013      	b.n	8001b0a <HAL_TIM_PWM_Start+0xa2>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d104      	bne.n	8001af2 <HAL_TIM_PWM_Start+0x8a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	223f      	movs	r2, #63	; 0x3f
 8001aec:	2102      	movs	r1, #2
 8001aee:	5499      	strb	r1, [r3, r2]
 8001af0:	e00b      	b.n	8001b0a <HAL_TIM_PWM_Start+0xa2>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d104      	bne.n	8001b02 <HAL_TIM_PWM_Start+0x9a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2240      	movs	r2, #64	; 0x40
 8001afc:	2102      	movs	r1, #2
 8001afe:	5499      	strb	r1, [r3, r2]
 8001b00:	e003      	b.n	8001b0a <HAL_TIM_PWM_Start+0xa2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2241      	movs	r2, #65	; 0x41
 8001b06:	2102      	movs	r1, #2
 8001b08:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 fe0c 	bl	8002730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <HAL_TIM_PWM_Start+0x13c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d009      	beq.n	8001b36 <HAL_TIM_PWM_Start+0xce>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a20      	ldr	r2, [pc, #128]	; (8001ba8 <HAL_TIM_PWM_Start+0x140>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d004      	beq.n	8001b36 <HAL_TIM_PWM_Start+0xce>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <HAL_TIM_PWM_Start+0x144>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_TIM_PWM_Start+0xd2>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_TIM_PWM_Start+0xd4>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	0209      	lsls	r1, r1, #8
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <HAL_TIM_PWM_Start+0x13c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d004      	beq.n	8001b66 <HAL_TIM_PWM_Start+0xfe>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_TIM_PWM_Start+0x148>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d111      	bne.n	8001b8a <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b06      	cmp	r3, #6
 8001b76:	d010      	beq.n	8001b9a <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2101      	movs	r1, #1
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b88:	e007      	b.n	8001b9a <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40012c00 	.word	0x40012c00
 8001ba8:	40014400 	.word	0x40014400
 8001bac:	40014800 	.word	0x40014800
 8001bb0:	40000400 	.word	0x40000400

08001bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d124      	bne.n	8001c14 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d11d      	bne.n	8001c14 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	4252      	negs	r2, r2
 8001be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2203      	movs	r2, #3
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d004      	beq.n	8001bfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 fa9c 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e007      	b.n	8001c0e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 fa8f 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f000 fa9b 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d125      	bne.n	8001c6e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d11e      	bne.n	8001c6e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2205      	movs	r2, #5
 8001c36:	4252      	negs	r2, r2
 8001c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	23c0      	movs	r3, #192	; 0xc0
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d004      	beq.n	8001c58 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f000 fa6f 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8001c56:	e007      	b.n	8001c68 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 fa62 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 fa6e 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2208      	movs	r2, #8
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d124      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2208      	movs	r2, #8
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d11d      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2209      	movs	r2, #9
 8001c90:	4252      	negs	r2, r2
 8001c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 fa43 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8001cae:	e007      	b.n	8001cc0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 fa36 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 fa42 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b10      	cmp	r3, #16
 8001cd2:	d125      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2210      	movs	r2, #16
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d11e      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2211      	movs	r2, #17
 8001ce8:	4252      	negs	r2, r2
 8001cea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2208      	movs	r2, #8
 8001cf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69da      	ldr	r2, [r3, #28]
 8001cf8:	23c0      	movs	r3, #192	; 0xc0
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d004      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f000 fa16 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e007      	b.n	8001d1a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 fa09 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 fa15 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2201      	movs	r2, #1
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10f      	bne.n	8001d4e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d108      	bne.n	8001d4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2202      	movs	r2, #2
 8001d42:	4252      	negs	r2, r2
 8001d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 f9e3 	bl	8002114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b80      	cmp	r3, #128	; 0x80
 8001d5a:	d10f      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	d108      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2281      	movs	r2, #129	; 0x81
 8001d70:	4252      	negs	r2, r2
 8001d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 fd58 	bl	800282c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b40      	cmp	r3, #64	; 0x40
 8001d88:	d10f      	bne.n	8001daa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2240      	movs	r2, #64	; 0x40
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d108      	bne.n	8001daa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2241      	movs	r2, #65	; 0x41
 8001d9e:	4252      	negs	r2, r2
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 f9d5 	bl	8002154 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2220      	movs	r2, #32
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d10f      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d108      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2221      	movs	r2, #33	; 0x21
 8001dcc:	4252      	negs	r2, r2
 8001dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 fd22 	bl	800281c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dec:	2317      	movs	r3, #23
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	223c      	movs	r2, #60	; 0x3c
 8001df8:	5c9b      	ldrb	r3, [r3, r2]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e0ad      	b.n	8001f5e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	223c      	movs	r2, #60	; 0x3c
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d100      	bne.n	8001e12 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001e10:	e076      	b.n	8001f00 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0c      	cmp	r3, #12
 8001e16:	d900      	bls.n	8001e1a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001e18:	e095      	b.n	8001f46 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d04e      	beq.n	8001ebe <HAL_TIM_PWM_ConfigChannel+0xde>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d900      	bls.n	8001e28 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001e26:	e08e      	b.n	8001f46 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d021      	beq.n	8001e78 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001e34:	e087      	b.n	8001f46 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	0011      	movs	r1, r2
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f9fc 	bl	800223c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2108      	movs	r1, #8
 8001e50:	430a      	orrs	r2, r1
 8001e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2104      	movs	r1, #4
 8001e60:	438a      	bics	r2, r1
 8001e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6999      	ldr	r1, [r3, #24]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	619a      	str	r2, [r3, #24]
      break;
 8001e76:	e06b      	b.n	8001f50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	0011      	movs	r1, r2
 8001e80:	0018      	movs	r0, r3
 8001e82:	f000 fa59 	bl	8002338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699a      	ldr	r2, [r3, #24]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	0109      	lsls	r1, r1, #4
 8001e94:	430a      	orrs	r2, r1
 8001e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4931      	ldr	r1, [pc, #196]	; (8001f68 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6999      	ldr	r1, [r3, #24]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	021a      	lsls	r2, r3, #8
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	619a      	str	r2, [r3, #24]
      break;
 8001ebc:	e048      	b.n	8001f50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	0011      	movs	r1, r2
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 fab4 	bl	8002434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2108      	movs	r1, #8
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	438a      	bics	r2, r1
 8001eea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69d9      	ldr	r1, [r3, #28]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	61da      	str	r2, [r3, #28]
      break;
 8001efe:	e027      	b.n	8001f50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	0011      	movs	r1, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 fb13 	bl	8002534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	0109      	lsls	r1, r1, #4
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	490f      	ldr	r1, [pc, #60]	; (8001f68 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69d9      	ldr	r1, [r3, #28]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	021a      	lsls	r2, r3, #8
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	61da      	str	r2, [r3, #28]
      break;
 8001f44:	e004      	b.n	8001f50 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001f46:	2317      	movs	r3, #23
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
      break;
 8001f4e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	223c      	movs	r2, #60	; 0x3c
 8001f54:	2100      	movs	r1, #0
 8001f56:	5499      	strb	r1, [r3, r2]

  return status;
 8001f58:	2317      	movs	r3, #23
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	781b      	ldrb	r3, [r3, #0]
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b006      	add	sp, #24
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	fffffbff 	.word	0xfffffbff

08001f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f76:	230f      	movs	r3, #15
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	223c      	movs	r2, #60	; 0x3c
 8001f82:	5c9b      	ldrb	r3, [r3, r2]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_TIM_ConfigClockSource+0x20>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e0bc      	b.n	8002106 <HAL_TIM_ConfigClockSource+0x19a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	223c      	movs	r2, #60	; 0x3c
 8001f90:	2101      	movs	r1, #1
 8001f92:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	223d      	movs	r2, #61	; 0x3d
 8001f98:	2102      	movs	r1, #2
 8001f9a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2277      	movs	r2, #119	; 0x77
 8001fa8:	4393      	bics	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4a58      	ldr	r2, [pc, #352]	; (8002110 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	0192      	lsls	r2, r2, #6
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d040      	beq.n	800204a <HAL_TIM_ConfigClockSource+0xde>
 8001fc8:	2280      	movs	r2, #128	; 0x80
 8001fca:	0192      	lsls	r2, r2, #6
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d900      	bls.n	8001fd2 <HAL_TIM_ConfigClockSource+0x66>
 8001fd0:	e088      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x178>
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	0152      	lsls	r2, r2, #5
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d100      	bne.n	8001fdc <HAL_TIM_ConfigClockSource+0x70>
 8001fda:	e088      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x182>
 8001fdc:	2280      	movs	r2, #128	; 0x80
 8001fde:	0152      	lsls	r2, r2, #5
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d900      	bls.n	8001fe6 <HAL_TIM_ConfigClockSource+0x7a>
 8001fe4:	e07e      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x178>
 8001fe6:	2b70      	cmp	r3, #112	; 0x70
 8001fe8:	d018      	beq.n	800201c <HAL_TIM_ConfigClockSource+0xb0>
 8001fea:	d900      	bls.n	8001fee <HAL_TIM_ConfigClockSource+0x82>
 8001fec:	e07a      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x178>
 8001fee:	2b60      	cmp	r3, #96	; 0x60
 8001ff0:	d04f      	beq.n	8002092 <HAL_TIM_ConfigClockSource+0x126>
 8001ff2:	d900      	bls.n	8001ff6 <HAL_TIM_ConfigClockSource+0x8a>
 8001ff4:	e076      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x178>
 8001ff6:	2b50      	cmp	r3, #80	; 0x50
 8001ff8:	d03b      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x106>
 8001ffa:	d900      	bls.n	8001ffe <HAL_TIM_ConfigClockSource+0x92>
 8001ffc:	e072      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x178>
 8001ffe:	2b40      	cmp	r3, #64	; 0x40
 8002000:	d057      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0x146>
 8002002:	d900      	bls.n	8002006 <HAL_TIM_ConfigClockSource+0x9a>
 8002004:	e06e      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x178>
 8002006:	2b30      	cmp	r3, #48	; 0x30
 8002008:	d063      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0x166>
 800200a:	d86b      	bhi.n	80020e4 <HAL_TIM_ConfigClockSource+0x178>
 800200c:	2b20      	cmp	r3, #32
 800200e:	d060      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0x166>
 8002010:	d868      	bhi.n	80020e4 <HAL_TIM_ConfigClockSource+0x178>
 8002012:	2b00      	cmp	r3, #0
 8002014:	d05d      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0x166>
 8002016:	2b10      	cmp	r3, #16
 8002018:	d05b      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0x166>
 800201a:	e063      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6899      	ldr	r1, [r3, #8]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f000 fb60 	bl	80026f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2277      	movs	r2, #119	; 0x77
 800203c:	4313      	orrs	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	609a      	str	r2, [r3, #8]
      break;
 8002048:	e052      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f000 fb49 	bl	80026f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	01c9      	lsls	r1, r1, #7
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
      break;
 8002070:	e03e      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6859      	ldr	r1, [r3, #4]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	001a      	movs	r2, r3
 8002080:	f000 fabc 	bl	80025fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2150      	movs	r1, #80	; 0x50
 800208a:	0018      	movs	r0, r3
 800208c:	f000 fb16 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 8002090:	e02e      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	001a      	movs	r2, r3
 80020a0:	f000 fada 	bl	8002658 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2160      	movs	r1, #96	; 0x60
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 fb06 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 80020b0:	e01e      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6859      	ldr	r1, [r3, #4]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	001a      	movs	r2, r3
 80020c0:	f000 fa9c 	bl	80025fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2140      	movs	r1, #64	; 0x40
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 faf6 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 80020d0:	e00e      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0019      	movs	r1, r3
 80020dc:	0010      	movs	r0, r2
 80020de:	f000 faed 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 80020e2:	e005      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80020e4:	230f      	movs	r3, #15
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
      break;
 80020ec:	e000      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80020ee:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	223d      	movs	r2, #61	; 0x3d
 80020f4:	2101      	movs	r1, #1
 80020f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	223c      	movs	r2, #60	; 0x3c
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]

  return status;
 8002100:	230f      	movs	r3, #15
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	781b      	ldrb	r3, [r3, #0]
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	ffff00ff 	.word	0xffff00ff

08002114 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}

08002164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <TIM_Base_SetConfig+0xc0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d003      	beq.n	8002184 <TIM_Base_SetConfig+0x20>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <TIM_Base_SetConfig+0xc4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d108      	bne.n	8002196 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2270      	movs	r2, #112	; 0x70
 8002188:	4393      	bics	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <TIM_Base_SetConfig+0xc0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00f      	beq.n	80021be <TIM_Base_SetConfig+0x5a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a21      	ldr	r2, [pc, #132]	; (8002228 <TIM_Base_SetConfig+0xc4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00b      	beq.n	80021be <TIM_Base_SetConfig+0x5a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a20      	ldr	r2, [pc, #128]	; (800222c <TIM_Base_SetConfig+0xc8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <TIM_Base_SetConfig+0x5a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <TIM_Base_SetConfig+0xcc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d003      	beq.n	80021be <TIM_Base_SetConfig+0x5a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <TIM_Base_SetConfig+0xd0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <TIM_Base_SetConfig+0xd4>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2280      	movs	r2, #128	; 0x80
 80021d4:	4393      	bics	r3, r2
 80021d6:	001a      	movs	r2, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <TIM_Base_SetConfig+0xc0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <TIM_Base_SetConfig+0xaa>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <TIM_Base_SetConfig+0xcc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d003      	beq.n	800220e <TIM_Base_SetConfig+0xaa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <TIM_Base_SetConfig+0xd0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d103      	bne.n	8002216 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	615a      	str	r2, [r3, #20]
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b004      	add	sp, #16
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40000400 	.word	0x40000400
 800222c:	40002000 	.word	0x40002000
 8002230:	40014400 	.word	0x40014400
 8002234:	40014800 	.word	0x40014800
 8002238:	fffffcff 	.word	0xfffffcff

0800223c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	2201      	movs	r2, #1
 800224c:	4393      	bics	r3, r2
 800224e:	001a      	movs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2270      	movs	r2, #112	; 0x70
 800226a:	4393      	bics	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2203      	movs	r2, #3
 8002272:	4393      	bics	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2202      	movs	r2, #2
 8002284:	4393      	bics	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a23      	ldr	r2, [pc, #140]	; (8002324 <TIM_OC1_SetConfig+0xe8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <TIM_OC1_SetConfig+0x6e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a22      	ldr	r2, [pc, #136]	; (8002328 <TIM_OC1_SetConfig+0xec>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <TIM_OC1_SetConfig+0x6e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a21      	ldr	r2, [pc, #132]	; (800232c <TIM_OC1_SetConfig+0xf0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d10c      	bne.n	80022c4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2208      	movs	r2, #8
 80022ae:	4393      	bics	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2204      	movs	r2, #4
 80022c0:	4393      	bics	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a17      	ldr	r2, [pc, #92]	; (8002324 <TIM_OC1_SetConfig+0xe8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d007      	beq.n	80022dc <TIM_OC1_SetConfig+0xa0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a16      	ldr	r2, [pc, #88]	; (8002328 <TIM_OC1_SetConfig+0xec>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d003      	beq.n	80022dc <TIM_OC1_SetConfig+0xa0>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <TIM_OC1_SetConfig+0xf0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d111      	bne.n	8002300 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4a14      	ldr	r2, [pc, #80]	; (8002330 <TIM_OC1_SetConfig+0xf4>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <TIM_OC1_SetConfig+0xf8>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	621a      	str	r2, [r3, #32]
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b006      	add	sp, #24
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40014400 	.word	0x40014400
 800232c:	40014800 	.word	0x40014800
 8002330:	fffffeff 	.word	0xfffffeff
 8002334:	fffffdff 	.word	0xfffffdff

08002338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	2210      	movs	r2, #16
 8002348:	4393      	bics	r3, r2
 800234a:	001a      	movs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4a2c      	ldr	r2, [pc, #176]	; (8002418 <TIM_OC2_SetConfig+0xe0>)
 8002366:	4013      	ands	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4a2b      	ldr	r2, [pc, #172]	; (800241c <TIM_OC2_SetConfig+0xe4>)
 800236e:	4013      	ands	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2220      	movs	r2, #32
 8002382:	4393      	bics	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a22      	ldr	r2, [pc, #136]	; (8002420 <TIM_OC2_SetConfig+0xe8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10d      	bne.n	80023b6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	4393      	bics	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2240      	movs	r2, #64	; 0x40
 80023b2:	4393      	bics	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <TIM_OC2_SetConfig+0xe8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <TIM_OC2_SetConfig+0x96>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <TIM_OC2_SetConfig+0xec>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d003      	beq.n	80023ce <TIM_OC2_SetConfig+0x96>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a17      	ldr	r2, [pc, #92]	; (8002428 <TIM_OC2_SetConfig+0xf0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d113      	bne.n	80023f6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <TIM_OC2_SetConfig+0xf4>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4a15      	ldr	r2, [pc, #84]	; (8002430 <TIM_OC2_SetConfig+0xf8>)
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	621a      	str	r2, [r3, #32]
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b006      	add	sp, #24
 8002416:	bd80      	pop	{r7, pc}
 8002418:	ffff8fff 	.word	0xffff8fff
 800241c:	fffffcff 	.word	0xfffffcff
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40014400 	.word	0x40014400
 8002428:	40014800 	.word	0x40014800
 800242c:	fffffbff 	.word	0xfffffbff
 8002430:	fffff7ff 	.word	0xfffff7ff

08002434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a33      	ldr	r2, [pc, #204]	; (8002510 <TIM_OC3_SetConfig+0xdc>)
 8002444:	401a      	ands	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2270      	movs	r2, #112	; 0x70
 8002460:	4393      	bics	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2203      	movs	r2, #3
 8002468:	4393      	bics	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	4a26      	ldr	r2, [pc, #152]	; (8002514 <TIM_OC3_SetConfig+0xe0>)
 800247a:	4013      	ands	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a22      	ldr	r2, [pc, #136]	; (8002518 <TIM_OC3_SetConfig+0xe4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d10d      	bne.n	80024ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	4a21      	ldr	r2, [pc, #132]	; (800251c <TIM_OC3_SetConfig+0xe8>)
 8002496:	4013      	ands	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <TIM_OC3_SetConfig+0xec>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a19      	ldr	r2, [pc, #100]	; (8002518 <TIM_OC3_SetConfig+0xe4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <TIM_OC3_SetConfig+0x92>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <TIM_OC3_SetConfig+0xf0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d003      	beq.n	80024c6 <TIM_OC3_SetConfig+0x92>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <TIM_OC3_SetConfig+0xf4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d113      	bne.n	80024ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <TIM_OC3_SetConfig+0xf8>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4a17      	ldr	r2, [pc, #92]	; (8002530 <TIM_OC3_SetConfig+0xfc>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	621a      	str	r2, [r3, #32]
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b006      	add	sp, #24
 800250e:	bd80      	pop	{r7, pc}
 8002510:	fffffeff 	.word	0xfffffeff
 8002514:	fffffdff 	.word	0xfffffdff
 8002518:	40012c00 	.word	0x40012c00
 800251c:	fffff7ff 	.word	0xfffff7ff
 8002520:	fffffbff 	.word	0xfffffbff
 8002524:	40014400 	.word	0x40014400
 8002528:	40014800 	.word	0x40014800
 800252c:	ffffefff 	.word	0xffffefff
 8002530:	ffffdfff 	.word	0xffffdfff

08002534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	4a26      	ldr	r2, [pc, #152]	; (80025dc <TIM_OC4_SetConfig+0xa8>)
 8002544:	401a      	ands	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a20      	ldr	r2, [pc, #128]	; (80025e0 <TIM_OC4_SetConfig+0xac>)
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <TIM_OC4_SetConfig+0xb0>)
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <TIM_OC4_SetConfig+0xb4>)
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	031b      	lsls	r3, r3, #12
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a17      	ldr	r2, [pc, #92]	; (80025ec <TIM_OC4_SetConfig+0xb8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d007      	beq.n	80025a4 <TIM_OC4_SetConfig+0x70>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a16      	ldr	r2, [pc, #88]	; (80025f0 <TIM_OC4_SetConfig+0xbc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d003      	beq.n	80025a4 <TIM_OC4_SetConfig+0x70>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <TIM_OC4_SetConfig+0xc0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d109      	bne.n	80025b8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <TIM_OC4_SetConfig+0xc4>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	019b      	lsls	r3, r3, #6
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	621a      	str	r2, [r3, #32]
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b006      	add	sp, #24
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	ffffefff 	.word	0xffffefff
 80025e0:	ffff8fff 	.word	0xffff8fff
 80025e4:	fffffcff 	.word	0xfffffcff
 80025e8:	ffffdfff 	.word	0xffffdfff
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40014400 	.word	0x40014400
 80025f4:	40014800 	.word	0x40014800
 80025f8:	ffffbfff 	.word	0xffffbfff

080025fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	2201      	movs	r2, #1
 8002614:	4393      	bics	r3, r2
 8002616:	001a      	movs	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	22f0      	movs	r2, #240	; 0xf0
 8002626:	4393      	bics	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	220a      	movs	r2, #10
 8002638:	4393      	bics	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	621a      	str	r2, [r3, #32]
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b006      	add	sp, #24
 8002656:	bd80      	pop	{r7, pc}

08002658 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	2210      	movs	r2, #16
 800266a:	4393      	bics	r3, r2
 800266c:	001a      	movs	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <TIM_TI2_ConfigInputStage+0x60>)
 8002682:	4013      	ands	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	031b      	lsls	r3, r3, #12
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	22a0      	movs	r2, #160	; 0xa0
 8002694:	4393      	bics	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	621a      	str	r2, [r3, #32]
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b006      	add	sp, #24
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	ffff0fff 	.word	0xffff0fff

080026bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2270      	movs	r2, #112	; 0x70
 80026d0:	4393      	bics	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	2207      	movs	r2, #7
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b004      	add	sp, #16
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <TIM_ETR_SetConfig+0x3c>)
 8002708:	4013      	ands	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	021a      	lsls	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	431a      	orrs	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b006      	add	sp, #24
 800272a:	bd80      	pop	{r7, pc}
 800272c:	ffff00ff 	.word	0xffff00ff

08002730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	221f      	movs	r2, #31
 8002740:	4013      	ands	r3, r2
 8002742:	2201      	movs	r2, #1
 8002744:	409a      	lsls	r2, r3
 8002746:	0013      	movs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	43d2      	mvns	r2, r2
 8002752:	401a      	ands	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	211f      	movs	r1, #31
 8002760:	400b      	ands	r3, r1
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4099      	lsls	r1, r3
 8002766:	000b      	movs	r3, r1
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	621a      	str	r2, [r3, #32]
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b006      	add	sp, #24
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	223c      	movs	r2, #60	; 0x3c
 8002786:	5c9b      	ldrb	r3, [r3, r2]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800278c:	2302      	movs	r3, #2
 800278e:	e03c      	b.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	223c      	movs	r2, #60	; 0x3c
 8002794:	2101      	movs	r1, #1
 8002796:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	223d      	movs	r2, #61	; 0x3d
 800279c:	2102      	movs	r1, #2
 800279e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2270      	movs	r2, #112	; 0x70
 80027b4:	4393      	bics	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10c      	bne.n	80027f8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	4393      	bics	r3, r2
 80027e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	223d      	movs	r2, #61	; 0x3d
 80027fc:	2101      	movs	r1, #1
 80027fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	223c      	movs	r2, #60	; 0x3c
 8002804:	2100      	movs	r1, #0
 8002806:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40000400 	.word	0x40000400

0800281c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}

0800283c <__libc_init_array>:
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	2600      	movs	r6, #0
 8002840:	4d0c      	ldr	r5, [pc, #48]	; (8002874 <__libc_init_array+0x38>)
 8002842:	4c0d      	ldr	r4, [pc, #52]	; (8002878 <__libc_init_array+0x3c>)
 8002844:	1b64      	subs	r4, r4, r5
 8002846:	10a4      	asrs	r4, r4, #2
 8002848:	42a6      	cmp	r6, r4
 800284a:	d109      	bne.n	8002860 <__libc_init_array+0x24>
 800284c:	2600      	movs	r6, #0
 800284e:	f000 f821 	bl	8002894 <_init>
 8002852:	4d0a      	ldr	r5, [pc, #40]	; (800287c <__libc_init_array+0x40>)
 8002854:	4c0a      	ldr	r4, [pc, #40]	; (8002880 <__libc_init_array+0x44>)
 8002856:	1b64      	subs	r4, r4, r5
 8002858:	10a4      	asrs	r4, r4, #2
 800285a:	42a6      	cmp	r6, r4
 800285c:	d105      	bne.n	800286a <__libc_init_array+0x2e>
 800285e:	bd70      	pop	{r4, r5, r6, pc}
 8002860:	00b3      	lsls	r3, r6, #2
 8002862:	58eb      	ldr	r3, [r5, r3]
 8002864:	4798      	blx	r3
 8002866:	3601      	adds	r6, #1
 8002868:	e7ee      	b.n	8002848 <__libc_init_array+0xc>
 800286a:	00b3      	lsls	r3, r6, #2
 800286c:	58eb      	ldr	r3, [r5, r3]
 800286e:	4798      	blx	r3
 8002870:	3601      	adds	r6, #1
 8002872:	e7f2      	b.n	800285a <__libc_init_array+0x1e>
 8002874:	080028dc 	.word	0x080028dc
 8002878:	080028dc 	.word	0x080028dc
 800287c:	080028dc 	.word	0x080028dc
 8002880:	080028e0 	.word	0x080028e0

08002884 <memset>:
 8002884:	0003      	movs	r3, r0
 8002886:	1882      	adds	r2, r0, r2
 8002888:	4293      	cmp	r3, r2
 800288a:	d100      	bne.n	800288e <memset+0xa>
 800288c:	4770      	bx	lr
 800288e:	7019      	strb	r1, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	e7f9      	b.n	8002888 <memset+0x4>

08002894 <_init>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr

080028a0 <_fini>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	469e      	mov	lr, r3
 80028aa:	4770      	bx	lr
