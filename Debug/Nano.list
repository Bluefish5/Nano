
Nano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ffc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030ec  080030ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030ec  080030ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030ec  080030ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003100  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003100  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ad2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185c  00000000  00000000  00029b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f4ab  00000000  00000000  0002c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b380  00000000  00000000  0003bb9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ea1e  00000000  00000000  00046f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002428  00000000  00000000  000a598c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030a4 	.word	0x080030a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080030a4 	.word	0x080030a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  if (htim == &htim3) {
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800022c:	429a      	cmp	r2, r3
 800022e:	d105      	bne.n	800023c <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_GPIO_TogglePin(IR_PWM_GPIO_Port, IR_PWM_Pin);
 8000230:	2390      	movs	r3, #144	; 0x90
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	2140      	movs	r1, #64	; 0x40
 8000236:	0018      	movs	r0, r3
 8000238:	f001 fe3e 	bl	8001eb8 <HAL_GPIO_TogglePin>
    //HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
  }
}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200000b0 	.word	0x200000b0

08000248 <motorBreak>:

void motorBreak()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(H_BRIDGE_IN_1_GPIO_Port, H_BRIDGE_IN_1_Pin, GPIO_PIN_RESET);
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	021b      	lsls	r3, r3, #8
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <motorBreak+0x3c>)
 8000252:	2200      	movs	r2, #0
 8000254:	0019      	movs	r1, r3
 8000256:	f001 fe12 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_2_GPIO_Port, H_BRIDGE_IN_2_Pin, GPIO_PIN_RESET);
 800025a:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <motorBreak+0x3c>)
 800025c:	2200      	movs	r2, #0
 800025e:	2120      	movs	r1, #32
 8000260:	0018      	movs	r0, r3
 8000262:	f001 fe0c 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_3_GPIO_Port, H_BRIDGE_IN_3_Pin, GPIO_PIN_RESET);
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <motorBreak+0x3c>)
 8000268:	2200      	movs	r2, #0
 800026a:	2110      	movs	r1, #16
 800026c:	0018      	movs	r0, r3
 800026e:	f001 fe06 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_4_GPIO_Port, H_BRIDGE_IN_4_Pin, GPIO_PIN_RESET);
 8000272:	4b04      	ldr	r3, [pc, #16]	; (8000284 <motorBreak+0x3c>)
 8000274:	2200      	movs	r2, #0
 8000276:	2108      	movs	r1, #8
 8000278:	0018      	movs	r0, r3
 800027a:	f001 fe00 	bl	8001e7e <HAL_GPIO_WritePin>
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	48000400 	.word	0x48000400

08000288 <motorRevers>:
void motorRevers()
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(H_BRIDGE_IN_1_GPIO_Port, H_BRIDGE_IN_1_Pin, GPIO_PIN_RESET);
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	021b      	lsls	r3, r3, #8
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <motorRevers+0x3c>)
 8000292:	2200      	movs	r2, #0
 8000294:	0019      	movs	r1, r3
 8000296:	f001 fdf2 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_2_GPIO_Port, H_BRIDGE_IN_2_Pin, GPIO_PIN_SET);
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <motorRevers+0x3c>)
 800029c:	2201      	movs	r2, #1
 800029e:	2120      	movs	r1, #32
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 fdec 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_3_GPIO_Port, H_BRIDGE_IN_3_Pin, GPIO_PIN_SET);
 80002a6:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <motorRevers+0x3c>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	2110      	movs	r1, #16
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 fde6 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_4_GPIO_Port, H_BRIDGE_IN_4_Pin, GPIO_PIN_RESET);
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <motorRevers+0x3c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	2108      	movs	r1, #8
 80002b8:	0018      	movs	r0, r3
 80002ba:	f001 fde0 	bl	8001e7e <HAL_GPIO_WritePin>
}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	48000400 	.word	0x48000400

080002c8 <motorRotationRight>:
void motorRotationRight()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(H_BRIDGE_IN_1_GPIO_Port, H_BRIDGE_IN_1_Pin, GPIO_PIN_SET);
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	021b      	lsls	r3, r3, #8
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <motorRotationRight+0x3c>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	0019      	movs	r1, r3
 80002d6:	f001 fdd2 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_2_GPIO_Port, H_BRIDGE_IN_2_Pin, GPIO_PIN_RESET);
 80002da:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <motorRotationRight+0x3c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	2120      	movs	r1, #32
 80002e0:	0018      	movs	r0, r3
 80002e2:	f001 fdcc 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_3_GPIO_Port, H_BRIDGE_IN_3_Pin, GPIO_PIN_SET);
 80002e6:	4b07      	ldr	r3, [pc, #28]	; (8000304 <motorRotationRight+0x3c>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	2110      	movs	r1, #16
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fdc6 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_4_GPIO_Port, H_BRIDGE_IN_4_Pin, GPIO_PIN_RESET);
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <motorRotationRight+0x3c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	2108      	movs	r1, #8
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 fdc0 	bl	8001e7e <HAL_GPIO_WritePin>
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	48000400 	.word	0x48000400

08000308 <motorRotationLeft>:
void motorRotationLeft()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(H_BRIDGE_IN_1_GPIO_Port, H_BRIDGE_IN_1_Pin, GPIO_PIN_RESET);
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	021b      	lsls	r3, r3, #8
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <motorRotationLeft+0x3c>)
 8000312:	2200      	movs	r2, #0
 8000314:	0019      	movs	r1, r3
 8000316:	f001 fdb2 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_2_GPIO_Port, H_BRIDGE_IN_2_Pin, GPIO_PIN_SET);
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <motorRotationLeft+0x3c>)
 800031c:	2201      	movs	r2, #1
 800031e:	2120      	movs	r1, #32
 8000320:	0018      	movs	r0, r3
 8000322:	f001 fdac 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_3_GPIO_Port, H_BRIDGE_IN_3_Pin, GPIO_PIN_RESET);
 8000326:	4b07      	ldr	r3, [pc, #28]	; (8000344 <motorRotationLeft+0x3c>)
 8000328:	2200      	movs	r2, #0
 800032a:	2110      	movs	r1, #16
 800032c:	0018      	movs	r0, r3
 800032e:	f001 fda6 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_4_GPIO_Port, H_BRIDGE_IN_4_Pin, GPIO_PIN_SET);
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <motorRotationLeft+0x3c>)
 8000334:	2201      	movs	r2, #1
 8000336:	2108      	movs	r1, #8
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fda0 	bl	8001e7e <HAL_GPIO_WritePin>
}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	48000400 	.word	0x48000400

08000348 <motorForward>:
void motorForward()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(H_BRIDGE_IN_1_GPIO_Port, H_BRIDGE_IN_1_Pin, GPIO_PIN_SET);
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	021b      	lsls	r3, r3, #8
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <motorForward+0x3c>)
 8000352:	2201      	movs	r2, #1
 8000354:	0019      	movs	r1, r3
 8000356:	f001 fd92 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_2_GPIO_Port, H_BRIDGE_IN_2_Pin, GPIO_PIN_RESET);
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <motorForward+0x3c>)
 800035c:	2200      	movs	r2, #0
 800035e:	2120      	movs	r1, #32
 8000360:	0018      	movs	r0, r3
 8000362:	f001 fd8c 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_3_GPIO_Port, H_BRIDGE_IN_3_Pin, GPIO_PIN_RESET);
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <motorForward+0x3c>)
 8000368:	2200      	movs	r2, #0
 800036a:	2110      	movs	r1, #16
 800036c:	0018      	movs	r0, r3
 800036e:	f001 fd86 	bl	8001e7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(H_BRIDGE_IN_4_GPIO_Port, H_BRIDGE_IN_4_Pin, GPIO_PIN_SET);
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <motorForward+0x3c>)
 8000374:	2201      	movs	r2, #1
 8000376:	2108      	movs	r1, #8
 8000378:	0018      	movs	r0, r3
 800037a:	f001 fd80 	bl	8001e7e <HAL_GPIO_WritePin>
}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	48000400 	.word	0x48000400

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038c:	f000 fd5a 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000390:	f000 f90e 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000394:	f000 fa80 	bl	8000898 <MX_GPIO_Init>
  MX_ADC_Init();
 8000398:	f000 f95a 	bl	8000650 <MX_ADC_Init>
  MX_TIM3_Init();
 800039c:	f000 fa26 	bl	80007ec <MX_TIM3_Init>
  MX_TIM1_Init();
 80003a0:	f000 f9cc 	bl	800073c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80003a4:	4b77      	ldr	r3, [pc, #476]	; (8000584 <main+0x1fc>)
 80003a6:	0018      	movs	r0, r3
 80003a8:	f002 fa5a 	bl	8002860 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80003ac:	4b75      	ldr	r3, [pc, #468]	; (8000584 <main+0x1fc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_Base_Start_IT(&htim3);
 80003b4:	4b74      	ldr	r3, [pc, #464]	; (8000588 <main+0x200>)
 80003b6:	0018      	movs	r0, r3
 80003b8:	f002 fa90 	bl	80028dc <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc);
 80003bc:	4b73      	ldr	r3, [pc, #460]	; (800058c <main+0x204>)
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 ff08 	bl	80011d4 <HAL_ADC_Start>
  HAL_ADCEx_Calibration_Start(&hadc);
 80003c4:	4b71      	ldr	r3, [pc, #452]	; (800058c <main+0x204>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 fa46 	bl	8001858 <HAL_ADCEx_Calibration_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80003cc:	2301      	movs	r3, #1
 80003ce:	425a      	negs	r2, r3
 80003d0:	4b6e      	ldr	r3, [pc, #440]	; (800058c <main+0x204>)
 80003d2:	0011      	movs	r1, r2
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 ff51 	bl	800127c <HAL_ADC_PollForConversion>
	  sensor_value[0] = HAL_ADC_GetValue(&hadc);
 80003da:	4b6c      	ldr	r3, [pc, #432]	; (800058c <main+0x204>)
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 ffe5 	bl	80013ac <HAL_ADC_GetValue>
 80003e2:	0003      	movs	r3, r0
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	4b6a      	ldr	r3, [pc, #424]	; (8000590 <main+0x208>)
 80003e8:	801a      	strh	r2, [r3, #0]


	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80003ea:	2301      	movs	r3, #1
 80003ec:	425a      	negs	r2, r3
 80003ee:	4b67      	ldr	r3, [pc, #412]	; (800058c <main+0x204>)
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 ff42 	bl	800127c <HAL_ADC_PollForConversion>
	  sensor_value[1] = HAL_ADC_GetValue(&hadc);
 80003f8:	4b64      	ldr	r3, [pc, #400]	; (800058c <main+0x204>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 ffd6 	bl	80013ac <HAL_ADC_GetValue>
 8000400:	0003      	movs	r3, r0
 8000402:	b29a      	uxth	r2, r3
 8000404:	4b62      	ldr	r3, [pc, #392]	; (8000590 <main+0x208>)
 8000406:	805a      	strh	r2, [r3, #2]


	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000408:	2301      	movs	r3, #1
 800040a:	425a      	negs	r2, r3
 800040c:	4b5f      	ldr	r3, [pc, #380]	; (800058c <main+0x204>)
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f000 ff33 	bl	800127c <HAL_ADC_PollForConversion>
	  sensor_value[2] = HAL_ADC_GetValue(&hadc);
 8000416:	4b5d      	ldr	r3, [pc, #372]	; (800058c <main+0x204>)
 8000418:	0018      	movs	r0, r3
 800041a:	f000 ffc7 	bl	80013ac <HAL_ADC_GetValue>
 800041e:	0003      	movs	r3, r0
 8000420:	b29a      	uxth	r2, r3
 8000422:	4b5b      	ldr	r3, [pc, #364]	; (8000590 <main+0x208>)
 8000424:	809a      	strh	r2, [r3, #4]

	  line_sensor_1_value = HAL_GPIO_ReadPin(LINE_SENSOR_1_GPIO_Port,LINE_SENSOR_1_Pin);
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2104      	movs	r1, #4
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fd09 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000432:	0003      	movs	r3, r0
 8000434:	001a      	movs	r2, r3
 8000436:	4b57      	ldr	r3, [pc, #348]	; (8000594 <main+0x20c>)
 8000438:	701a      	strb	r2, [r3, #0]
	  line_sensor_2_value = HAL_GPIO_ReadPin(LINE_SENSOR_2_GPIO_Port,LINE_SENSOR_2_Pin);
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	015b      	lsls	r3, r3, #5
 800043e:	4a56      	ldr	r2, [pc, #344]	; (8000598 <main+0x210>)
 8000440:	0019      	movs	r1, r3
 8000442:	0010      	movs	r0, r2
 8000444:	f001 fcfe 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000448:	0003      	movs	r3, r0
 800044a:	001a      	movs	r2, r3
 800044c:	4b53      	ldr	r3, [pc, #332]	; (800059c <main+0x214>)
 800044e:	701a      	strb	r2, [r3, #0]

	  if(code==1086290565)// sprawdza czy robor otrzymał start
 8000450:	4b53      	ldr	r3, [pc, #332]	; (80005a0 <main+0x218>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a53      	ldr	r2, [pc, #332]	; (80005a4 <main+0x21c>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d1b8      	bne.n	80003cc <main+0x44>
	  {
		  while(1)
		  {
			  if(code==1086290055){while(1){motorBreak();}}
 800045a:	4b51      	ldr	r3, [pc, #324]	; (80005a0 <main+0x218>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a52      	ldr	r2, [pc, #328]	; (80005a8 <main+0x220>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d102      	bne.n	800046a <main+0xe2>
 8000464:	f7ff fef0 	bl	8000248 <motorBreak>
 8000468:	e7fc      	b.n	8000464 <main+0xdc>
			  motorForward();
 800046a:	f7ff ff6d 	bl	8000348 <motorForward>


			  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800046e:	2301      	movs	r3, #1
 8000470:	425a      	negs	r2, r3
 8000472:	4b46      	ldr	r3, [pc, #280]	; (800058c <main+0x204>)
 8000474:	0011      	movs	r1, r2
 8000476:	0018      	movs	r0, r3
 8000478:	f000 ff00 	bl	800127c <HAL_ADC_PollForConversion>
			  sensor_value[0] = HAL_ADC_GetValue(&hadc);
 800047c:	4b43      	ldr	r3, [pc, #268]	; (800058c <main+0x204>)
 800047e:	0018      	movs	r0, r3
 8000480:	f000 ff94 	bl	80013ac <HAL_ADC_GetValue>
 8000484:	0003      	movs	r3, r0
 8000486:	b29a      	uxth	r2, r3
 8000488:	4b41      	ldr	r3, [pc, #260]	; (8000590 <main+0x208>)
 800048a:	801a      	strh	r2, [r3, #0]


			  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800048c:	2301      	movs	r3, #1
 800048e:	425a      	negs	r2, r3
 8000490:	4b3e      	ldr	r3, [pc, #248]	; (800058c <main+0x204>)
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f000 fef1 	bl	800127c <HAL_ADC_PollForConversion>
			  sensor_value[1] = HAL_ADC_GetValue(&hadc);
 800049a:	4b3c      	ldr	r3, [pc, #240]	; (800058c <main+0x204>)
 800049c:	0018      	movs	r0, r3
 800049e:	f000 ff85 	bl	80013ac <HAL_ADC_GetValue>
 80004a2:	0003      	movs	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	4b3a      	ldr	r3, [pc, #232]	; (8000590 <main+0x208>)
 80004a8:	805a      	strh	r2, [r3, #2]


			  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80004aa:	2301      	movs	r3, #1
 80004ac:	425a      	negs	r2, r3
 80004ae:	4b37      	ldr	r3, [pc, #220]	; (800058c <main+0x204>)
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fee2 	bl	800127c <HAL_ADC_PollForConversion>
			  sensor_value[2] = HAL_ADC_GetValue(&hadc);
 80004b8:	4b34      	ldr	r3, [pc, #208]	; (800058c <main+0x204>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 ff76 	bl	80013ac <HAL_ADC_GetValue>
 80004c0:	0003      	movs	r3, r0
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	4b32      	ldr	r3, [pc, #200]	; (8000590 <main+0x208>)
 80004c6:	809a      	strh	r2, [r3, #4]

			  line_sensor_1_value = HAL_GPIO_ReadPin(LINE_SENSOR_1_GPIO_Port,LINE_SENSOR_1_Pin);
 80004c8:	2390      	movs	r3, #144	; 0x90
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	2104      	movs	r1, #4
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fcb8 	bl	8001e44 <HAL_GPIO_ReadPin>
 80004d4:	0003      	movs	r3, r0
 80004d6:	001a      	movs	r2, r3
 80004d8:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <main+0x20c>)
 80004da:	701a      	strb	r2, [r3, #0]
			  line_sensor_2_value = HAL_GPIO_ReadPin(LINE_SENSOR_2_GPIO_Port,LINE_SENSOR_2_Pin);
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	015b      	lsls	r3, r3, #5
 80004e0:	4a2d      	ldr	r2, [pc, #180]	; (8000598 <main+0x210>)
 80004e2:	0019      	movs	r1, r3
 80004e4:	0010      	movs	r0, r2
 80004e6:	f001 fcad 	bl	8001e44 <HAL_GPIO_ReadPin>
 80004ea:	0003      	movs	r3, r0
 80004ec:	001a      	movs	r2, r3
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <main+0x214>)
 80004f0:	701a      	strb	r2, [r3, #0]


			  if(sensor_value[2]<=2200)motorForward();
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <main+0x208>)
 80004f4:	889b      	ldrh	r3, [r3, #4]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	4a2c      	ldr	r2, [pc, #176]	; (80005ac <main+0x224>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d802      	bhi.n	8000504 <main+0x17c>
 80004fe:	f7ff ff23 	bl	8000348 <motorForward>
 8000502:	e7aa      	b.n	800045a <main+0xd2>
			  else if(sensor_value[0]<=2200)motorRotationLeft();
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <main+0x208>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	b29b      	uxth	r3, r3
 800050a:	4a28      	ldr	r2, [pc, #160]	; (80005ac <main+0x224>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d802      	bhi.n	8000516 <main+0x18e>
 8000510:	f7ff fefa 	bl	8000308 <motorRotationLeft>
 8000514:	e7a1      	b.n	800045a <main+0xd2>
			  else if(sensor_value[1]<=2200)motorRotationRight();
 8000516:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <main+0x208>)
 8000518:	885b      	ldrh	r3, [r3, #2]
 800051a:	b29b      	uxth	r3, r3
 800051c:	4a23      	ldr	r2, [pc, #140]	; (80005ac <main+0x224>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d802      	bhi.n	8000528 <main+0x1a0>
 8000522:	f7ff fed1 	bl	80002c8 <motorRotationRight>
 8000526:	e798      	b.n	800045a <main+0xd2>
			  else if(line_sensor_1_value==0)
 8000528:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <main+0x20c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d110      	bne.n	8000552 <main+0x1ca>
			  {
				  motorRevers();
 8000530:	f7ff feaa 	bl	8000288 <motorRevers>
				  HAL_Delay(500);
 8000534:	23fa      	movs	r3, #250	; 0xfa
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fce7 	bl	8000f0c <HAL_Delay>
				  motorRotationLeft();
 800053e:	f7ff fee3 	bl	8000308 <motorRotationLeft>
				  HAL_Delay(500);
 8000542:	23fa      	movs	r3, #250	; 0xfa
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fce0 	bl	8000f0c <HAL_Delay>
				  motorBreak();
 800054c:	f7ff fe7c 	bl	8000248 <motorBreak>
 8000550:	e783      	b.n	800045a <main+0xd2>
			  }
			  else if(line_sensor_2_value==0)
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <main+0x214>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d110      	bne.n	800057c <main+0x1f4>
			  {
				  motorRevers();
 800055a:	f7ff fe95 	bl	8000288 <motorRevers>
				  HAL_Delay(500);
 800055e:	23fa      	movs	r3, #250	; 0xfa
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fcd2 	bl	8000f0c <HAL_Delay>
				  motorRotationRight();
 8000568:	f7ff feae 	bl	80002c8 <motorRotationRight>
				  HAL_Delay(500);
 800056c:	23fa      	movs	r3, #250	; 0xfa
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fccb 	bl	8000f0c <HAL_Delay>
				  motorBreak();
 8000576:	f7ff fe67 	bl	8000248 <motorBreak>
 800057a:	e76e      	b.n	800045a <main+0xd2>
			  }
			  else motorForward();
 800057c:	f7ff fee4 	bl	8000348 <motorForward>
			  if(code==1086290055){while(1){motorBreak();}}
 8000580:	e76b      	b.n	800045a <main+0xd2>
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	20000068 	.word	0x20000068
 8000588:	200000b0 	.word	0x200000b0
 800058c:	20000028 	.word	0x20000028
 8000590:	200000f8 	.word	0x200000f8
 8000594:	200000fe 	.word	0x200000fe
 8000598:	48000400 	.word	0x48000400
 800059c:	200000ff 	.word	0x200000ff
 80005a0:	20000108 	.word	0x20000108
 80005a4:	40bf7a85 	.word	0x40bf7a85
 80005a8:	40bf7887 	.word	0x40bf7887
 80005ac:	00000898 	.word	0x00000898

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b091      	sub	sp, #68	; 0x44
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	2410      	movs	r4, #16
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2330      	movs	r3, #48	; 0x30
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f002 fd67 	bl	8003094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	2310      	movs	r3, #16
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f002 fd60 	bl	8003094 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80005d4:	0021      	movs	r1, r4
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2212      	movs	r2, #18
 80005da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2201      	movs	r2, #1
 80005e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2210      	movs	r2, #16
 80005ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2210      	movs	r2, #16
 80005f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2202      	movs	r2, #2
 80005f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2200      	movs	r2, #0
 80005fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	0312      	lsls	r2, r2, #12
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	187b      	adds	r3, r7, r1
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fc89 	bl	8001f28 <HAL_RCC_OscConfig>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800061a:	f000 fad7 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	003b      	movs	r3, r7
 8000620:	2207      	movs	r2, #7
 8000622:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	003b      	movs	r3, r7
 8000626:	2202      	movs	r2, #2
 8000628:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	003b      	movs	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	003b      	movs	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000636:	003b      	movs	r3, r7
 8000638:	2100      	movs	r1, #0
 800063a:	0018      	movs	r0, r3
 800063c:	f001 ff8e 	bl	800255c <HAL_RCC_ClockConfig>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000644:	f000 fac2 	bl	8000bcc <Error_Handler>
  }
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b011      	add	sp, #68	; 0x44
 800064e:	bd90      	pop	{r4, r7, pc}

08000650 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	0018      	movs	r0, r3
 800065a:	230c      	movs	r3, #12
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f002 fd18 	bl	8003094 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000664:	4b33      	ldr	r3, [pc, #204]	; (8000734 <MX_ADC_Init+0xe4>)
 8000666:	4a34      	ldr	r2, [pc, #208]	; (8000738 <MX_ADC_Init+0xe8>)
 8000668:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800066a:	4b32      	ldr	r3, [pc, #200]	; (8000734 <MX_ADC_Init+0xe4>)
 800066c:	2200      	movs	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000670:	4b30      	ldr	r3, [pc, #192]	; (8000734 <MX_ADC_Init+0xe4>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <MX_ADC_Init+0xe4>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_ADC_Init+0xe4>)
 800067e:	2201      	movs	r2, #1
 8000680:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000682:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <MX_ADC_Init+0xe4>)
 8000684:	2204      	movs	r2, #4
 8000686:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <MX_ADC_Init+0xe4>)
 800068a:	2200      	movs	r2, #0
 800068c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <MX_ADC_Init+0xe4>)
 8000690:	2200      	movs	r2, #0
 8000692:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <MX_ADC_Init+0xe4>)
 8000696:	2201      	movs	r2, #1
 8000698:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <MX_ADC_Init+0xe4>)
 800069c:	2200      	movs	r2, #0
 800069e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <MX_ADC_Init+0xe4>)
 80006a2:	22c2      	movs	r2, #194	; 0xc2
 80006a4:	32ff      	adds	r2, #255	; 0xff
 80006a6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_ADC_Init+0xe4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_ADC_Init+0xe4>)
 80006b0:	2224      	movs	r2, #36	; 0x24
 80006b2:	2100      	movs	r1, #0
 80006b4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_ADC_Init+0xe4>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_ADC_Init+0xe4>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fc48 	bl	8000f54 <HAL_ADC_Init>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80006c8:	f000 fa80 	bl	8000bcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2204      	movs	r2, #4
 80006d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0152      	lsls	r2, r2, #5
 80006d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0552      	lsls	r2, r2, #21
 80006e0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006e2:	1d3a      	adds	r2, r7, #4
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_ADC_Init+0xe4>)
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 ff3b 	bl	8001564 <HAL_ADC_ConfigChannel>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80006f2:	f000 fa6b 	bl	8000bcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2205      	movs	r2, #5
 80006fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006fc:	1d3a      	adds	r2, r7, #4
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_ADC_Init+0xe4>)
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f000 ff2e 	bl	8001564 <HAL_ADC_ConfigChannel>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 800070c:	f000 fa5e 	bl	8000bcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2208      	movs	r2, #8
 8000714:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000716:	1d3a      	adds	r2, r7, #4
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_ADC_Init+0xe4>)
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f000 ff21 	bl	8001564 <HAL_ADC_ConfigChannel>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000726:	f000 fa51 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b004      	add	sp, #16
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	20000028 	.word	0x20000028
 8000738:	40012400 	.word	0x40012400

0800073c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	2308      	movs	r3, #8
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	0018      	movs	r0, r3
 8000748:	2310      	movs	r3, #16
 800074a:	001a      	movs	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f002 fca1 	bl	8003094 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	003b      	movs	r3, r7
 8000754:	0018      	movs	r0, r3
 8000756:	2308      	movs	r3, #8
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f002 fc9a 	bl	8003094 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_TIM1_Init+0xa4>)
 8000762:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <MX_TIM1_Init+0xa8>)
 8000764:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_TIM1_Init+0xa4>)
 8000768:	220f      	movs	r2, #15
 800076a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_TIM1_Init+0xa4>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_TIM1_Init+0xa4>)
 8000774:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_TIM1_Init+0xac>)
 8000776:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_TIM1_Init+0xa4>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_TIM1_Init+0xa4>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_TIM1_Init+0xa4>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_TIM1_Init+0xa4>)
 800078c:	0018      	movs	r0, r3
 800078e:	f002 f817 	bl	80027c0 <HAL_TIM_Base_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000796:	f000 fa19 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079a:	2108      	movs	r1, #8
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	0152      	lsls	r2, r2, #5
 80007a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a4:	187a      	adds	r2, r7, r1
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_TIM1_Init+0xa4>)
 80007a8:	0011      	movs	r1, r2
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 f9f2 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007b4:	f000 fa0a 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	003b      	movs	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c4:	003a      	movs	r2, r7
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_TIM1_Init+0xa4>)
 80007c8:	0011      	movs	r1, r2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 fbdc 	bl	8002f88 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007d4:	f000 f9fa 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b006      	add	sp, #24
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000068 	.word	0x20000068
 80007e4:	40012c00 	.word	0x40012c00
 80007e8:	0000ffff 	.word	0x0000ffff

080007ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	2308      	movs	r3, #8
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	2310      	movs	r3, #16
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f002 fc49 	bl	8003094 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000802:	003b      	movs	r3, r7
 8000804:	0018      	movs	r0, r3
 8000806:	2308      	movs	r3, #8
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f002 fc42 	bl	8003094 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_TIM3_Init+0xa0>)
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <MX_TIM3_Init+0xa4>)
 8000814:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_TIM3_Init+0xa0>)
 8000818:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <MX_TIM3_Init+0xa8>)
 800081a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_TIM3_Init+0xa0>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_TIM3_Init+0xa0>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_TIM3_Init+0xa0>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_TIM3_Init+0xa0>)
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_TIM3_Init+0xa0>)
 8000836:	0018      	movs	r0, r3
 8000838:	f001 ffc2 	bl	80027c0 <HAL_TIM_Base_Init>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000840:	f000 f9c4 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	2108      	movs	r1, #8
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	0152      	lsls	r2, r2, #5
 800084c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800084e:	187a      	adds	r2, r7, r1
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_TIM3_Init+0xa0>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f002 f99d 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800085e:	f000 f9b5 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	003b      	movs	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086e:	003a      	movs	r2, r7
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_TIM3_Init+0xa0>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f002 fb87 	bl	8002f88 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800087e:	f000 f9a5 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b006      	add	sp, #24
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	200000b0 	.word	0x200000b0
 8000890:	40000400 	.word	0x40000400
 8000894:	00003e7f 	.word	0x00003e7f

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	240c      	movs	r4, #12
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	0018      	movs	r0, r3
 80008a4:	2314      	movs	r3, #20
 80008a6:	001a      	movs	r2, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	f002 fbf3 	bl	8003094 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b83      	ldr	r3, [pc, #524]	; (8000abc <MX_GPIO_Init+0x224>)
 80008b0:	695a      	ldr	r2, [r3, #20]
 80008b2:	4b82      	ldr	r3, [pc, #520]	; (8000abc <MX_GPIO_Init+0x224>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	03c9      	lsls	r1, r1, #15
 80008b8:	430a      	orrs	r2, r1
 80008ba:	615a      	str	r2, [r3, #20]
 80008bc:	4b7f      	ldr	r3, [pc, #508]	; (8000abc <MX_GPIO_Init+0x224>)
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	03db      	lsls	r3, r3, #15
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b7c      	ldr	r3, [pc, #496]	; (8000abc <MX_GPIO_Init+0x224>)
 80008cc:	695a      	ldr	r2, [r3, #20]
 80008ce:	4b7b      	ldr	r3, [pc, #492]	; (8000abc <MX_GPIO_Init+0x224>)
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0289      	lsls	r1, r1, #10
 80008d4:	430a      	orrs	r2, r1
 80008d6:	615a      	str	r2, [r3, #20]
 80008d8:	4b78      	ldr	r3, [pc, #480]	; (8000abc <MX_GPIO_Init+0x224>)
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	029b      	lsls	r3, r3, #10
 80008e0:	4013      	ands	r3, r2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b75      	ldr	r3, [pc, #468]	; (8000abc <MX_GPIO_Init+0x224>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b74      	ldr	r3, [pc, #464]	; (8000abc <MX_GPIO_Init+0x224>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	02c9      	lsls	r1, r1, #11
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b71      	ldr	r3, [pc, #452]	; (8000abc <MX_GPIO_Init+0x224>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	02db      	lsls	r3, r3, #11
 80008fc:	4013      	ands	r3, r2
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, H_BRIDGE_FL_1_Pin|H_BRIDGE_FL_2_Pin, GPIO_PIN_SET);
 8000902:	2390      	movs	r3, #144	; 0x90
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2201      	movs	r2, #1
 8000908:	2103      	movs	r1, #3
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fab7 	bl	8001e7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_PWM_GPIO_Port, IR_PWM_Pin, GPIO_PIN_RESET);
 8000910:	2390      	movs	r3, #144	; 0x90
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	2200      	movs	r2, #0
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	0018      	movs	r0, r3
 800091a:	f001 fab0 	bl	8001e7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|LED_1_Pin|H_BRIDGE_IN_1_Pin
 800091e:	4968      	ldr	r1, [pc, #416]	; (8000ac0 <MX_GPIO_Init+0x228>)
 8000920:	4b68      	ldr	r3, [pc, #416]	; (8000ac4 <MX_GPIO_Init+0x22c>)
 8000922:	2200      	movs	r2, #0
 8000924:	0018      	movs	r0, r3
 8000926:	f001 faaa 	bl	8001e7e <HAL_GPIO_WritePin>
                          |H_BRIDGE_IN_4_Pin|H_BRIDGE_IN_3_Pin|H_BRIDGE_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(H_BRIDGE_SLEEP_GPIO_Port, H_BRIDGE_SLEEP_Pin, GPIO_PIN_SET);
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	01db      	lsls	r3, r3, #7
 800092e:	4865      	ldr	r0, [pc, #404]	; (8000ac4 <MX_GPIO_Init+0x22c>)
 8000930:	2201      	movs	r2, #1
 8000932:	0019      	movs	r1, r3
 8000934:	f001 faa3 	bl	8001e7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : H_BRIDGE_FL_1_Pin H_BRIDGE_FL_2_Pin */
  GPIO_InitStruct.Pin = H_BRIDGE_FL_1_Pin|H_BRIDGE_FL_2_Pin;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2203      	movs	r2, #3
 800093c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2201      	movs	r2, #1
 8000942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2201      	movs	r2, #1
 8000948:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	193a      	adds	r2, r7, r4
 8000952:	2390      	movs	r3, #144	; 0x90
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f001 f903 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_SENSOR_1_Pin */
  GPIO_InitStruct.Pin = LINE_SENSOR_1_Pin;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2204      	movs	r2, #4
 8000962:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LINE_SENSOR_1_GPIO_Port, &GPIO_InitStruct);
 8000970:	193a      	adds	r2, r7, r4
 8000972:	2390      	movs	r3, #144	; 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f001 f8f3 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2208      	movs	r2, #8
 8000982:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2201      	movs	r2, #1
 800098e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 8000990:	193a      	adds	r2, r7, r4
 8000992:	2390      	movs	r3, #144	; 0x90
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f001 f8e3 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_PWM_Pin */
  GPIO_InitStruct.Pin = IR_PWM_Pin;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2201      	movs	r2, #1
 80009a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IR_PWM_GPIO_Port, &GPIO_InitStruct);
 80009b6:	193a      	adds	r2, r7, r4
 80009b8:	2390      	movs	r3, #144	; 0x90
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 f8d0 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2202      	movs	r2, #2
 80009c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2201      	movs	r2, #1
 80009d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	4a3a      	ldr	r2, [pc, #232]	; (8000ac4 <MX_GPIO_Init+0x22c>)
 80009da:	0019      	movs	r1, r3
 80009dc:	0010      	movs	r0, r2
 80009de:	f001 f8c1 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin;
 80009e2:	0021      	movs	r1, r4
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	22b0      	movs	r2, #176	; 0xb0
 80009e8:	0192      	lsls	r2, r2, #6
 80009ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	000c      	movs	r4, r1
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2201      	movs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	4a30      	ldr	r2, [pc, #192]	; (8000ac4 <MX_GPIO_Init+0x22c>)
 8000a04:	0019      	movs	r1, r3
 8000a06:	0010      	movs	r0, r2
 8000a08:	f001 f8ac 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_SENSOR_2_Pin */
  GPIO_InitStruct.Pin = LINE_SENSOR_2_Pin;
 8000a0c:	0021      	movs	r1, r4
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	0152      	lsls	r2, r2, #5
 8000a14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	000c      	movs	r4, r1
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LINE_SENSOR_2_GPIO_Port, &GPIO_InitStruct);
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <MX_GPIO_Init+0x22c>)
 8000a28:	0019      	movs	r1, r3
 8000a2a:	0010      	movs	r0, r2
 8000a2c:	f001 f89a 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : H_BRIDGE_SLEEP_Pin */
  GPIO_InitStruct.Pin = H_BRIDGE_SLEEP_Pin;
 8000a30:	0021      	movs	r1, r4
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	01d2      	lsls	r2, r2, #7
 8000a38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	000c      	movs	r4, r1
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2202      	movs	r2, #2
 8000a46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(H_BRIDGE_SLEEP_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <MX_GPIO_Init+0x22c>)
 8000a52:	0019      	movs	r1, r3
 8000a54:	0010      	movs	r0, r2
 8000a56:	f001 f885 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : H_BRIDGE_IN_1_Pin H_BRIDGE_IN_4_Pin H_BRIDGE_IN_3_Pin H_BRIDGE_IN_2_Pin */
  GPIO_InitStruct.Pin = H_BRIDGE_IN_1_Pin|H_BRIDGE_IN_4_Pin|H_BRIDGE_IN_3_Pin|H_BRIDGE_IN_2_Pin;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <MX_GPIO_Init+0x230>)
 8000a5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2201      	movs	r2, #1
 8000a64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2203      	movs	r2, #3
 8000a70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <MX_GPIO_Init+0x22c>)
 8000a76:	0019      	movs	r1, r3
 8000a78:	0010      	movs	r0, r2
 8000a7a:	f001 f873 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : STARTER_Pin */
  GPIO_InitStruct.Pin = STARTER_Pin;
 8000a7e:	0021      	movs	r1, r4
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	0052      	lsls	r2, r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2284      	movs	r2, #132	; 0x84
 8000a8c:	0392      	lsls	r2, r2, #14
 8000a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(STARTER_GPIO_Port, &GPIO_InitStruct);
 8000a96:	187a      	adds	r2, r7, r1
 8000a98:	2390      	movs	r3, #144	; 0x90
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 f860 	bl	8001b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2007      	movs	r0, #7
 8000aaa:	f001 f829 	bl	8001b00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000aae:	2007      	movs	r0, #7
 8000ab0:	f001 f83b 	bl	8001b2a <HAL_NVIC_EnableIRQ>

}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b009      	add	sp, #36	; 0x24
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	0000ac38 	.word	0x0000ac38
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	00008038 	.word	0x00008038

08000acc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	1dbb      	adds	r3, r7, #6
 8000ad6:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == STARTER_Pin)
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	881a      	ldrh	r2, [r3, #0]
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d161      	bne.n	8000ba8 <HAL_GPIO_EXTI_Callback+0xdc>
  {
    if (__HAL_TIM_GET_COUNTER(&htim1) > 8000)
 8000ae4:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aea:	23fa      	movs	r3, #250	; 0xfa
 8000aec:	015b      	lsls	r3, r3, #5
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d906      	bls.n	8000b00 <HAL_GPIO_EXTI_Callback+0x34>
    {
      tempCode = 0;
 8000af2:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
      bitIndex = 0;
 8000af8:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e031      	b.n	8000b64 <HAL_GPIO_EXTI_Callback+0x98>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim1) > 1700)
 8000b00:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b06:	4a2d      	ldr	r2, [pc, #180]	; (8000bbc <HAL_GPIO_EXTI_Callback+0xf0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d912      	bls.n	8000b32 <HAL_GPIO_EXTI_Callback+0x66>
    {
      tempCode |= (1UL << (31-bitIndex));   // write 1
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	001a      	movs	r2, r3
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	061b      	lsls	r3, r3, #24
 8000b16:	40d3      	lsrs	r3, r2
 8000b18:	001a      	movs	r2, r3
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b22:	601a      	str	r2, [r3, #0]
      bitIndex++;
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	e018      	b.n	8000b64 <HAL_GPIO_EXTI_Callback+0x98>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim1) > 1000)
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b38:	23fa      	movs	r3, #250	; 0xfa
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d911      	bls.n	8000b64 <HAL_GPIO_EXTI_Callback+0x98>
    {
      tempCode &= ~(1UL << (31-bitIndex));  // write 0
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	061b      	lsls	r3, r3, #24
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	43da      	mvns	r2, r3
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	401a      	ands	r2, r3
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b56:	601a      	str	r2, [r3, #0]
      bitIndex++;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b62:	701a      	strb	r2, [r3, #0]
    }
    if(bitIndex == 32)
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b20      	cmp	r3, #32
 8000b6a:	d119      	bne.n	8000ba0 <HAL_GPIO_EXTI_Callback+0xd4>
    {
      cmdli = ~tempCode; // Logical inverted last 8 bits
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000b78:	701a      	strb	r2, [r3, #0]
      cmd = tempCode >> 8; // Second last 8 bits
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000b84:	701a      	strb	r2, [r3, #0]
      if(cmdli == cmd) // Check for errors
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d103      	bne.n	8000b9a <HAL_GPIO_EXTI_Callback+0xce>
      {
        code = tempCode; // If no bit errors
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000b98:	601a      	str	r2, [r3, #0]
      }
      bitIndex = 0;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
    }
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000068 	.word	0x20000068
 8000bb4:	20000100 	.word	0x20000100
 8000bb8:	20000104 	.word	0x20000104
 8000bbc:	000006a4 	.word	0x000006a4
 8000bc0:	20000106 	.word	0x20000106
 8000bc4:	20000105 	.word	0x20000105
 8000bc8:	20000108 	.word	0x20000108

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x44>)
 8000be0:	699a      	ldr	r2, [r3, #24]
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_MspInit+0x44>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	430a      	orrs	r2, r1
 8000be8:	619a      	str	r2, [r3, #24]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x44>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x44>)
 8000bf8:	69da      	ldr	r2, [r3, #28]
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_MspInit+0x44>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0549      	lsls	r1, r1, #21
 8000c00:	430a      	orrs	r2, r1
 8000c02:	61da      	str	r2, [r3, #28]
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_MspInit+0x44>)
 8000c06:	69da      	ldr	r2, [r3, #28]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	055b      	lsls	r3, r3, #21
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b08b      	sub	sp, #44	; 0x2c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	2414      	movs	r4, #20
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	2314      	movs	r3, #20
 8000c30:	001a      	movs	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	f002 fa2e 	bl	8003094 <memset>
  if(hadc->Instance==ADC1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a2b      	ldr	r2, [pc, #172]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d150      	bne.n	8000ce4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c42:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <HAL_ADC_MspInit+0xd0>)
 8000c44:	699a      	ldr	r2, [r3, #24]
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_ADC_MspInit+0xd0>)
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	0089      	lsls	r1, r1, #2
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	619a      	str	r2, [r3, #24]
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_ADC_MspInit+0xd0>)
 8000c52:	699a      	ldr	r2, [r3, #24]
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <HAL_ADC_MspInit+0xd0>)
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_ADC_MspInit+0xd0>)
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	0289      	lsls	r1, r1, #10
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	615a      	str	r2, [r3, #20]
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_ADC_MspInit+0xd0>)
 8000c6e:	695a      	ldr	r2, [r3, #20]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_ADC_MspInit+0xd0>)
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_ADC_MspInit+0xd0>)
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	02c9      	lsls	r1, r1, #11
 8000c84:	430a      	orrs	r2, r1
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_ADC_MspInit+0xd0>)
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	02db      	lsls	r3, r3, #11
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = SENSOR_1_Pin|SENSOR_2_Pin;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2230      	movs	r2, #48	; 0x30
 8000c9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	193a      	adds	r2, r7, r4
 8000caa:	2390      	movs	r3, #144	; 0x90
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 ff57 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_3_Pin;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(SENSOR_3_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_ADC_MspInit+0xd4>)
 8000ccc:	0019      	movs	r1, r3
 8000cce:	0010      	movs	r0, r2
 8000cd0:	f000 ff48 	bl	8001b64 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	200c      	movs	r0, #12
 8000cda:	f000 ff11 	bl	8001b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000cde:	200c      	movs	r0, #12
 8000ce0:	f000 ff23 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b00b      	add	sp, #44	; 0x2c
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	40012400 	.word	0x40012400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000400 	.word	0x48000400

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_TIM_Base_MspInit+0x6c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10e      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <HAL_TIM_Base_MspInit+0x70>)
 8000d0c:	699a      	ldr	r2, [r3, #24]
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_TIM_Base_MspInit+0x70>)
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	0109      	lsls	r1, r1, #4
 8000d14:	430a      	orrs	r2, r1
 8000d16:	619a      	str	r2, [r3, #24]
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_TIM_Base_MspInit+0x70>)
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d26:	e018      	b.n	8000d5a <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_TIM_Base_MspInit+0x74>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d113      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_TIM_Base_MspInit+0x70>)
 8000d34:	69da      	ldr	r2, [r3, #28]
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_TIM_Base_MspInit+0x70>)
 8000d38:	2102      	movs	r1, #2
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	61da      	str	r2, [r3, #28]
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_TIM_Base_MspInit+0x70>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	2202      	movs	r2, #2
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	2010      	movs	r0, #16
 8000d50:	f000 fed6 	bl	8001b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d54:	2010      	movs	r0, #16
 8000d56:	f000 fee8 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b004      	add	sp, #16
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40000400 	.word	0x40000400

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f89e 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STARTER_Pin);
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	0018      	movs	r0, r3
 8000da8:	f001 f8a2 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <ADC1_IRQHandler+0x14>)
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 fb02 	bl	80013c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000028 	.word	0x20000028

08000dcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <TIM3_IRQHandler+0x14>)
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f001 fdc8 	bl	8002968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	200000b0 	.word	0x200000b0

08000de4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e1a:	f7ff ffe3 	bl	8000de4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e1e:	f002 f915 	bl	800304c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e22:	f7ff fab1 	bl	8000388 <main>

08000e26 <LoopForever>:

LoopForever:
    b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   r0, =_estack
 8000e28:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e34:	080030f4 	.word	0x080030f4
  ldr r2, =_sbss
 8000e38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e3c:	20000110 	.word	0x20000110

08000e40 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <DMA1_Channel1_IRQHandler>
	...

08000e44 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_Init+0x24>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_Init+0x24>)
 8000e4e:	2110      	movs	r1, #16
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f809 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5a:	f7ff febd 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	40022000 	.word	0x40022000

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_InitTick+0x5c>)
 8000e76:	681c      	ldr	r4, [r3, #0]
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	23fa      	movs	r3, #250	; 0xfa
 8000e80:	0098      	lsls	r0, r3, #2
 8000e82:	f7ff f941 	bl	8000108 <__udivsi3>
 8000e86:	0003      	movs	r3, r0
 8000e88:	0019      	movs	r1, r3
 8000e8a:	0020      	movs	r0, r4
 8000e8c:	f7ff f93c 	bl	8000108 <__udivsi3>
 8000e90:	0003      	movs	r3, r0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fe59 	bl	8001b4a <HAL_SYSTICK_Config>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e00f      	b.n	8000ec0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d80b      	bhi.n	8000ebe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	425b      	negs	r3, r3
 8000eac:	2200      	movs	r2, #0
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f000 fe26 	bl	8001b00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_InitTick+0x64>)
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	001a      	movs	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	18d2      	adds	r2, r2, r3
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	2000010c 	.word	0x2000010c

08000ef8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	2000010c 	.word	0x2000010c

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fff0 	bl	8000ef8 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3301      	adds	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	001a      	movs	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	f7ff ffe0 	bl	8000ef8 <HAL_GetTick>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	20000008 	.word	0x20000008

08000f54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e125      	b.n	80011be <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10a      	bne.n	8000f90 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2234      	movs	r2, #52	; 0x34
 8000f84:	2100      	movs	r1, #0
 8000f86:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff fe48 	bl	8000c20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f94:	2210      	movs	r2, #16
 8000f96:	4013      	ands	r3, r2
 8000f98:	d000      	beq.n	8000f9c <HAL_ADC_Init+0x48>
 8000f9a:	e103      	b.n	80011a4 <HAL_ADC_Init+0x250>
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d000      	beq.n	8000fa8 <HAL_ADC_Init+0x54>
 8000fa6:	e0fd      	b.n	80011a4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2204      	movs	r2, #4
 8000fb0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000fb2:	d000      	beq.n	8000fb6 <HAL_ADC_Init+0x62>
 8000fb4:	e0f6      	b.n	80011a4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fba:	4a83      	ldr	r2, [pc, #524]	; (80011c8 <HAL_ADC_Init+0x274>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d112      	bne.n	8000ffa <HAL_ADC_Init+0xa6>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d009      	beq.n	8000ff6 <HAL_ADC_Init+0xa2>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	401a      	ands	r2, r3
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_Init+0xa6>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_ADC_Init+0xa8>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d116      	bne.n	800102e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2218      	movs	r2, #24
 8001008:	4393      	bics	r3, r2
 800100a:	0019      	movs	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	0899      	lsrs	r1, r3, #2
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4964      	ldr	r1, [pc, #400]	; (80011cc <HAL_ADC_Init+0x278>)
 800103a:	400a      	ands	r2, r1
 800103c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7e1b      	ldrb	r3, [r3, #24]
 8001042:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7e5b      	ldrb	r3, [r3, #25]
 8001048:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800104a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7e9b      	ldrb	r3, [r3, #26]
 8001050:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001052:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	2b01      	cmp	r3, #1
 800105a:	d002      	beq.n	8001062 <HAL_ADC_Init+0x10e>
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	015b      	lsls	r3, r3, #5
 8001060:	e000      	b.n	8001064 <HAL_ADC_Init+0x110>
 8001062:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001064:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800106a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d101      	bne.n	8001078 <HAL_ADC_Init+0x124>
 8001074:	2304      	movs	r3, #4
 8001076:	e000      	b.n	800107a <HAL_ADC_Init+0x126>
 8001078:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800107a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2124      	movs	r1, #36	; 0x24
 8001080:	5c5b      	ldrb	r3, [r3, r1]
 8001082:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001084:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	4313      	orrs	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7edb      	ldrb	r3, [r3, #27]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d115      	bne.n	80010c0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7e9b      	ldrb	r3, [r3, #26]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d105      	bne.n	80010a8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	0252      	lsls	r2, r2, #9
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	e00b      	b.n	80010c0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ac:	2220      	movs	r2, #32
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b8:	2201      	movs	r2, #1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	23c2      	movs	r3, #194	; 0xc2
 80010c6:	33ff      	adds	r3, #255	; 0xff
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d007      	beq.n	80010dc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80010d4:	4313      	orrs	r3, r2
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	4313      	orrs	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68d9      	ldr	r1, [r3, #12]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	055b      	lsls	r3, r3, #21
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d01b      	beq.n	8001130 <HAL_ADC_Init+0x1dc>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d017      	beq.n	8001130 <HAL_ADC_Init+0x1dc>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	2b02      	cmp	r3, #2
 8001106:	d013      	beq.n	8001130 <HAL_ADC_Init+0x1dc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	2b03      	cmp	r3, #3
 800110e:	d00f      	beq.n	8001130 <HAL_ADC_Init+0x1dc>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	2b04      	cmp	r3, #4
 8001116:	d00b      	beq.n	8001130 <HAL_ADC_Init+0x1dc>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	2b05      	cmp	r3, #5
 800111e:	d007      	beq.n	8001130 <HAL_ADC_Init+0x1dc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001124:	2b06      	cmp	r3, #6
 8001126:	d003      	beq.n	8001130 <HAL_ADC_Init+0x1dc>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	2b07      	cmp	r3, #7
 800112e:	d112      	bne.n	8001156 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2107      	movs	r1, #7
 800113c:	438a      	bics	r2, r1
 800113e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6959      	ldr	r1, [r3, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	2207      	movs	r2, #7
 800114c:	401a      	ands	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <HAL_ADC_Init+0x27c>)
 800115e:	4013      	ands	r3, r2
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	429a      	cmp	r2, r3
 8001164:	d10b      	bne.n	800117e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001170:	2203      	movs	r2, #3
 8001172:	4393      	bics	r3, r2
 8001174:	2201      	movs	r2, #1
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800117c:	e01c      	b.n	80011b8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001182:	2212      	movs	r2, #18
 8001184:	4393      	bics	r3, r2
 8001186:	2210      	movs	r2, #16
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001192:	2201      	movs	r2, #1
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800119a:	230f      	movs	r3, #15
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80011a2:	e009      	b.n	80011b8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	2210      	movs	r2, #16
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80011b0:	230f      	movs	r3, #15
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011b8:	230f      	movs	r3, #15
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	781b      	ldrb	r3, [r3, #0]
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	fffffefd 	.word	0xfffffefd
 80011cc:	fffe0219 	.word	0xfffe0219
 80011d0:	833fffe7 	.word	0x833fffe7

080011d4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011dc:	230f      	movs	r3, #15
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2204      	movs	r2, #4
 80011ec:	4013      	ands	r3, r2
 80011ee:	d138      	bne.n	8001262 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2234      	movs	r2, #52	; 0x34
 80011f4:	5c9b      	ldrb	r3, [r3, r2]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_ADC_Start+0x2a>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e038      	b.n	8001270 <HAL_ADC_Start+0x9c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2234      	movs	r2, #52	; 0x34
 8001202:	2101      	movs	r1, #1
 8001204:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7e5b      	ldrb	r3, [r3, #25]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d007      	beq.n	800121e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800120e:	230f      	movs	r3, #15
 8001210:	18fc      	adds	r4, r7, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	0018      	movs	r0, r3
 8001216:	f000 fa9b 	bl	8001750 <ADC_Enable>
 800121a:	0003      	movs	r3, r0
 800121c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d120      	bne.n	800126a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122c:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_ADC_Start+0xa4>)
 800122e:	4013      	ands	r3, r2
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	0052      	lsls	r2, r2, #1
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2234      	movs	r2, #52	; 0x34
 8001244:	2100      	movs	r1, #0
 8001246:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	221c      	movs	r2, #28
 800124e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2104      	movs	r1, #4
 800125c:	430a      	orrs	r2, r1
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	e003      	b.n	800126a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001262:	230f      	movs	r3, #15
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800126a:	230f      	movs	r3, #15
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	781b      	ldrb	r3, [r3, #0]
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b005      	add	sp, #20
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	fffff0fe 	.word	0xfffff0fe

0800127c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	2b08      	cmp	r3, #8
 800128c:	d102      	bne.n	8001294 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800128e:	2308      	movs	r3, #8
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	e014      	b.n	80012be <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	4013      	ands	r3, r2
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a6:	2220      	movs	r2, #32
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2234      	movs	r2, #52	; 0x34
 80012b2:	2100      	movs	r1, #0
 80012b4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e071      	b.n	800139e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80012ba:	230c      	movs	r3, #12
 80012bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80012be:	f7ff fe1b 	bl	8000ef8 <HAL_GetTick>
 80012c2:	0003      	movs	r3, r0
 80012c4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012c6:	e01f      	b.n	8001308 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	d01c      	beq.n	8001308 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <HAL_ADC_PollForConversion+0x68>
 80012d4:	f7ff fe10 	bl	8000ef8 <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d211      	bcs.n	8001308 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	d10b      	bne.n	8001308 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	2204      	movs	r2, #4
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2234      	movs	r2, #52	; 0x34
 8001300:	2100      	movs	r1, #0
 8001302:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e04a      	b.n	800139e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	d0d9      	beq.n	80012c8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	23c0      	movs	r3, #192	; 0xc0
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	4013      	ands	r3, r2
 800132e:	d12d      	bne.n	800138c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001334:	2b00      	cmp	r3, #0
 8001336:	d129      	bne.n	800138c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2208      	movs	r2, #8
 8001340:	4013      	ands	r3, r2
 8001342:	2b08      	cmp	r3, #8
 8001344:	d122      	bne.n	800138c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2204      	movs	r2, #4
 800134e:	4013      	ands	r3, r2
 8001350:	d110      	bne.n	8001374 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	210c      	movs	r1, #12
 800135e:	438a      	bics	r2, r1
 8001360:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <HAL_ADC_PollForConversion+0x12c>)
 8001368:	4013      	ands	r3, r2
 800136a:	2201      	movs	r2, #1
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	639a      	str	r2, [r3, #56]	; 0x38
 8001372:	e00b      	b.n	800138c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001378:	2220      	movs	r2, #32
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001384:	2201      	movs	r2, #1
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7e1b      	ldrb	r3, [r3, #24]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	220c      	movs	r2, #12
 800139a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	0018      	movs	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b004      	add	sp, #16
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	fffffefe 	.word	0xfffffefe

080013ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2204      	movs	r2, #4
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d106      	bne.n	80013e8 <HAL_ADC_IRQHandler+0x24>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2204      	movs	r2, #4
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d00d      	beq.n	8001404 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2208      	movs	r2, #8
 80013f0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d14f      	bne.n	8001496 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2208      	movs	r2, #8
 80013fe:	4013      	ands	r3, r2
 8001400:	2b08      	cmp	r3, #8
 8001402:	d148      	bne.n	8001496 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	2210      	movs	r2, #16
 800140a:	4013      	ands	r3, r2
 800140c:	d106      	bne.n	800141c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	23c0      	movs	r3, #192	; 0xc0
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	4013      	ands	r3, r2
 8001428:	d12d      	bne.n	8001486 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800142e:	2b00      	cmp	r3, #0
 8001430:	d129      	bne.n	8001486 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2208      	movs	r2, #8
 800143a:	4013      	ands	r3, r2
 800143c:	2b08      	cmp	r3, #8
 800143e:	d122      	bne.n	8001486 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2204      	movs	r2, #4
 8001448:	4013      	ands	r3, r2
 800144a:	d110      	bne.n	800146e <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	210c      	movs	r1, #12
 8001458:	438a      	bics	r2, r1
 800145a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001460:	4a33      	ldr	r2, [pc, #204]	; (8001530 <HAL_ADC_IRQHandler+0x16c>)
 8001462:	4013      	ands	r3, r2
 8001464:	2201      	movs	r2, #1
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	639a      	str	r2, [r3, #56]	; 0x38
 800146c:	e00b      	b.n	8001486 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001472:	2220      	movs	r2, #32
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147e:	2201      	movs	r2, #1
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	0018      	movs	r0, r3
 800148a:	f000 f853 	bl	8001534 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	4013      	ands	r3, r2
 80014a0:	2b80      	cmp	r3, #128	; 0x80
 80014a2:	d115      	bne.n	80014d0 <HAL_ADC_IRQHandler+0x10c>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b80      	cmp	r3, #128	; 0x80
 80014b0:	d10e      	bne.n	80014d0 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	0252      	lsls	r2, r2, #9
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 f83e 	bl	8001544 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2210      	movs	r2, #16
 80014d8:	4013      	ands	r3, r2
 80014da:	2b10      	cmp	r3, #16
 80014dc:	d123      	bne.n	8001526 <HAL_ADC_IRQHandler+0x162>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2210      	movs	r2, #16
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b10      	cmp	r3, #16
 80014ea:	d11c      	bne.n	8001526 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d006      	beq.n	8001502 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2201      	movs	r2, #1
 80014fc:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d10d      	bne.n	800151e <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001506:	2202      	movs	r2, #2
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2210      	movs	r2, #16
 8001514:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	0018      	movs	r0, r3
 800151a:	f000 f81b 	bl	8001554 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2210      	movs	r2, #16
 8001524:	601a      	str	r2, [r3, #0]
  }

}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	fffffefe 	.word	0xfffffefe

08001534 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b002      	add	sp, #8
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156e:	230f      	movs	r3, #15
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	055b      	lsls	r3, r3, #21
 8001582:	429a      	cmp	r2, r3
 8001584:	d011      	beq.n	80015aa <HAL_ADC_ConfigChannel+0x46>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	2b01      	cmp	r3, #1
 800158c:	d00d      	beq.n	80015aa <HAL_ADC_ConfigChannel+0x46>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	2b02      	cmp	r3, #2
 8001594:	d009      	beq.n	80015aa <HAL_ADC_ConfigChannel+0x46>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	2b03      	cmp	r3, #3
 800159c:	d005      	beq.n	80015aa <HAL_ADC_ConfigChannel+0x46>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d001      	beq.n	80015aa <HAL_ADC_ConfigChannel+0x46>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2234      	movs	r2, #52	; 0x34
 80015ae:	5c9b      	ldrb	r3, [r3, r2]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x54>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e0bb      	b.n	8001730 <HAL_ADC_ConfigChannel+0x1cc>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2234      	movs	r2, #52	; 0x34
 80015bc:	2101      	movs	r1, #1
 80015be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2204      	movs	r2, #4
 80015c8:	4013      	ands	r3, r2
 80015ca:	d000      	beq.n	80015ce <HAL_ADC_ConfigChannel+0x6a>
 80015cc:	e09f      	b.n	800170e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4a59      	ldr	r2, [pc, #356]	; (8001738 <HAL_ADC_ConfigChannel+0x1d4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d100      	bne.n	80015da <HAL_ADC_ConfigChannel+0x76>
 80015d8:	e077      	b.n	80016ca <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2201      	movs	r2, #1
 80015e6:	409a      	lsls	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	055b      	lsls	r3, r3, #21
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d037      	beq.n	800166c <HAL_ADC_ConfigChannel+0x108>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2b01      	cmp	r3, #1
 8001602:	d033      	beq.n	800166c <HAL_ADC_ConfigChannel+0x108>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	2b02      	cmp	r3, #2
 800160a:	d02f      	beq.n	800166c <HAL_ADC_ConfigChannel+0x108>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	2b03      	cmp	r3, #3
 8001612:	d02b      	beq.n	800166c <HAL_ADC_ConfigChannel+0x108>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	2b04      	cmp	r3, #4
 800161a:	d027      	beq.n	800166c <HAL_ADC_ConfigChannel+0x108>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	2b05      	cmp	r3, #5
 8001622:	d023      	beq.n	800166c <HAL_ADC_ConfigChannel+0x108>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	2b06      	cmp	r3, #6
 800162a:	d01f      	beq.n	800166c <HAL_ADC_ConfigChannel+0x108>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	2b07      	cmp	r3, #7
 8001632:	d01b      	beq.n	800166c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	2107      	movs	r1, #7
 8001640:	400b      	ands	r3, r1
 8001642:	429a      	cmp	r2, r3
 8001644:	d012      	beq.n	800166c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2107      	movs	r1, #7
 8001652:	438a      	bics	r2, r1
 8001654:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6959      	ldr	r1, [r3, #20]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2207      	movs	r2, #7
 8001662:	401a      	ands	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b10      	cmp	r3, #16
 8001672:	d003      	beq.n	800167c <HAL_ADC_ConfigChannel+0x118>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b11      	cmp	r3, #17
 800167a:	d152      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_ADC_ConfigChannel+0x1d8>)
 800167e:	6819      	ldr	r1, [r3, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b10      	cmp	r3, #16
 8001686:	d102      	bne.n	800168e <HAL_ADC_ConfigChannel+0x12a>
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	e001      	b.n	8001692 <HAL_ADC_ConfigChannel+0x12e>
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	03db      	lsls	r3, r3, #15
 8001692:	4a2a      	ldr	r2, [pc, #168]	; (800173c <HAL_ADC_ConfigChannel+0x1d8>)
 8001694:	430b      	orrs	r3, r1
 8001696:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b10      	cmp	r3, #16
 800169e:	d140      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_ADC_ConfigChannel+0x1dc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4927      	ldr	r1, [pc, #156]	; (8001744 <HAL_ADC_ConfigChannel+0x1e0>)
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7fe fd2e 	bl	8000108 <__udivsi3>
 80016ac:	0003      	movs	r3, r0
 80016ae:	001a      	movs	r2, r3
 80016b0:	0013      	movs	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	189b      	adds	r3, r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016ba:	e002      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3b01      	subs	r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f9      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x158>
 80016c8:	e02b      	b.n	8001722 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	4099      	lsls	r1, r3
 80016d8:	000b      	movs	r3, r1
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	400a      	ands	r2, r1
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d003      	beq.n	80016f4 <HAL_ADC_ConfigChannel+0x190>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b11      	cmp	r3, #17
 80016f2:	d116      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_ADC_ConfigChannel+0x1d8>)
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b10      	cmp	r3, #16
 80016fe:	d101      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x1a0>
 8001700:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_ADC_ConfigChannel+0x1e4>)
 8001702:	e000      	b.n	8001706 <HAL_ADC_ConfigChannel+0x1a2>
 8001704:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_ADC_ConfigChannel+0x1e8>)
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_ADC_ConfigChannel+0x1d8>)
 8001708:	400a      	ands	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e009      	b.n	8001722 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	2220      	movs	r2, #32
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800171a:	230f      	movs	r3, #15
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2234      	movs	r2, #52	; 0x34
 8001726:	2100      	movs	r1, #0
 8001728:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800172a:	230f      	movs	r3, #15
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	781b      	ldrb	r3, [r3, #0]
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b004      	add	sp, #16
 8001736:	bd80      	pop	{r7, pc}
 8001738:	00001001 	.word	0x00001001
 800173c:	40012708 	.word	0x40012708
 8001740:	20000000 	.word	0x20000000
 8001744:	000f4240 	.word	0x000f4240
 8001748:	ff7fffff 	.word	0xff7fffff
 800174c:	ffbfffff 	.word	0xffbfffff

08001750 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2203      	movs	r2, #3
 8001768:	4013      	ands	r3, r2
 800176a:	2b01      	cmp	r3, #1
 800176c:	d112      	bne.n	8001794 <ADC_Enable+0x44>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	2b01      	cmp	r3, #1
 800177a:	d009      	beq.n	8001790 <ADC_Enable+0x40>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	401a      	ands	r2, r3
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	429a      	cmp	r2, r3
 800178e:	d101      	bne.n	8001794 <ADC_Enable+0x44>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <ADC_Enable+0x46>
 8001794:	2300      	movs	r3, #0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d152      	bne.n	8001840 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a2a      	ldr	r2, [pc, #168]	; (800184c <ADC_Enable+0xfc>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	d00d      	beq.n	80017c2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	2210      	movs	r2, #16
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b6:	2201      	movs	r2, #1
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e03f      	b.n	8001842 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2101      	movs	r1, #1
 80017ce:	430a      	orrs	r2, r1
 80017d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <ADC_Enable+0x100>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	491f      	ldr	r1, [pc, #124]	; (8001854 <ADC_Enable+0x104>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f7fe fc95 	bl	8000108 <__udivsi3>
 80017de:	0003      	movs	r3, r0
 80017e0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017e2:	e002      	b.n	80017ea <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f9      	bne.n	80017e4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017f0:	f7ff fb82 	bl	8000ef8 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f8:	e01b      	b.n	8001832 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017fa:	f7ff fb7d 	bl	8000ef8 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d914      	bls.n	8001832 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	4013      	ands	r3, r2
 8001812:	2b01      	cmp	r3, #1
 8001814:	d00d      	beq.n	8001832 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	2210      	movs	r2, #16
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001826:	2201      	movs	r2, #1
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e007      	b.n	8001842 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	2b01      	cmp	r3, #1
 800183e:	d1dc      	bne.n	80017fa <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b004      	add	sp, #16
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	80000017 	.word	0x80000017
 8001850:	20000000 	.word	0x20000000
 8001854:	000f4240 	.word	0x000f4240

08001858 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001860:	2317      	movs	r3, #23
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2234      	movs	r2, #52	; 0x34
 8001874:	5c9b      	ldrb	r3, [r3, r2]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_ADCEx_Calibration_Start+0x26>
 800187a:	2302      	movs	r3, #2
 800187c:	e08d      	b.n	800199a <HAL_ADCEx_Calibration_Start+0x142>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2234      	movs	r2, #52	; 0x34
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2203      	movs	r2, #3
 800188e:	4013      	ands	r3, r2
 8001890:	2b01      	cmp	r3, #1
 8001892:	d112      	bne.n	80018ba <HAL_ADCEx_Calibration_Start+0x62>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	4013      	ands	r3, r2
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d009      	beq.n	80018b6 <HAL_ADCEx_Calibration_Start+0x5e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	401a      	ands	r2, r3
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d101      	bne.n	80018ba <HAL_ADCEx_Calibration_Start+0x62>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_ADCEx_Calibration_Start+0x64>
 80018ba:	2300      	movs	r3, #0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d15b      	bne.n	8001978 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	4a37      	ldr	r2, [pc, #220]	; (80019a4 <HAL_ADCEx_Calibration_Start+0x14c>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	2202      	movs	r2, #2
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2203      	movs	r2, #3
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2103      	movs	r1, #3
 80018e8:	438a      	bics	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0609      	lsls	r1, r1, #24
 80018fa:	430a      	orrs	r2, r1
 80018fc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80018fe:	f7ff fafb 	bl	8000ef8 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001906:	e01d      	b.n	8001944 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001908:	f7ff faf6 	bl	8000ef8 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d916      	bls.n	8001944 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	0fdb      	lsrs	r3, r3, #31
 800191e:	07da      	lsls	r2, r3, #31
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	061b      	lsls	r3, r3, #24
 8001924:	429a      	cmp	r2, r3
 8001926:	d10d      	bne.n	8001944 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192c:	2212      	movs	r2, #18
 800192e:	4393      	bics	r3, r2
 8001930:	2210      	movs	r2, #16
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2234      	movs	r2, #52	; 0x34
 800193c:	2100      	movs	r1, #0
 800193e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e02a      	b.n	800199a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	0fdb      	lsrs	r3, r3, #31
 800194c:	07da      	lsls	r2, r3, #31
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	061b      	lsls	r3, r3, #24
 8001952:	429a      	cmp	r2, r3
 8001954:	d0d8      	beq.n	8001908 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68d9      	ldr	r1, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	430a      	orrs	r2, r1
 8001964:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196a:	2203      	movs	r2, #3
 800196c:	4393      	bics	r3, r2
 800196e:	2201      	movs	r2, #1
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
 8001976:	e009      	b.n	800198c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	2220      	movs	r2, #32
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001984:	2317      	movs	r3, #23
 8001986:	18fb      	adds	r3, r7, r3
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2234      	movs	r2, #52	; 0x34
 8001990:	2100      	movs	r1, #0
 8001992:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001994:	2317      	movs	r3, #23
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	781b      	ldrb	r3, [r3, #0]
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b006      	add	sp, #24
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	fffffefd 	.word	0xfffffefd

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	0002      	movs	r2, r0
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	1dfb      	adds	r3, r7, #7
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b7f      	cmp	r3, #127	; 0x7f
 80019ba:	d809      	bhi.n	80019d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019bc:	1dfb      	adds	r3, r7, #7
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	001a      	movs	r2, r3
 80019c2:	231f      	movs	r3, #31
 80019c4:	401a      	ands	r2, r3
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_EnableIRQ+0x30>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	4091      	lsls	r1, r2
 80019cc:	000a      	movs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
  }
}
 80019d0:	46c0      	nop			; (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b002      	add	sp, #8
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	0002      	movs	r2, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b7f      	cmp	r3, #127	; 0x7f
 80019f0:	d828      	bhi.n	8001a44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f2:	4a2f      	ldr	r2, [pc, #188]	; (8001ab0 <__NVIC_SetPriority+0xd4>)
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	33c0      	adds	r3, #192	; 0xc0
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	589b      	ldr	r3, [r3, r2]
 8001a02:	1dfa      	adds	r2, r7, #7
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	0011      	movs	r1, r2
 8001a08:	2203      	movs	r2, #3
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	00d2      	lsls	r2, r2, #3
 8001a0e:	21ff      	movs	r1, #255	; 0xff
 8001a10:	4091      	lsls	r1, r2
 8001a12:	000a      	movs	r2, r1
 8001a14:	43d2      	mvns	r2, r2
 8001a16:	401a      	ands	r2, r3
 8001a18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	22ff      	movs	r2, #255	; 0xff
 8001a20:	401a      	ands	r2, r3
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	0018      	movs	r0, r3
 8001a28:	2303      	movs	r3, #3
 8001a2a:	4003      	ands	r3, r0
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a30:	481f      	ldr	r0, [pc, #124]	; (8001ab0 <__NVIC_SetPriority+0xd4>)
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	33c0      	adds	r3, #192	; 0xc0
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a42:	e031      	b.n	8001aa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <__NVIC_SetPriority+0xd8>)
 8001a46:	1dfb      	adds	r3, r7, #7
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	400b      	ands	r3, r1
 8001a50:	3b08      	subs	r3, #8
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3306      	adds	r3, #6
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	18d3      	adds	r3, r2, r3
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	1dfa      	adds	r2, r7, #7
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	0011      	movs	r1, r2
 8001a64:	2203      	movs	r2, #3
 8001a66:	400a      	ands	r2, r1
 8001a68:	00d2      	lsls	r2, r2, #3
 8001a6a:	21ff      	movs	r1, #255	; 0xff
 8001a6c:	4091      	lsls	r1, r2
 8001a6e:	000a      	movs	r2, r1
 8001a70:	43d2      	mvns	r2, r2
 8001a72:	401a      	ands	r2, r3
 8001a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	019b      	lsls	r3, r3, #6
 8001a7a:	22ff      	movs	r2, #255	; 0xff
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	0018      	movs	r0, r3
 8001a84:	2303      	movs	r3, #3
 8001a86:	4003      	ands	r3, r0
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a8c:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <__NVIC_SetPriority+0xd8>)
 8001a8e:	1dfb      	adds	r3, r7, #7
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	001c      	movs	r4, r3
 8001a94:	230f      	movs	r3, #15
 8001a96:	4023      	ands	r3, r4
 8001a98:	3b08      	subs	r3, #8
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	3306      	adds	r3, #6
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	18c3      	adds	r3, r0, r3
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b003      	add	sp, #12
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	1e5a      	subs	r2, r3, #1
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	045b      	lsls	r3, r3, #17
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d301      	bcc.n	8001ad0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001acc:	2301      	movs	r3, #1
 8001ace:	e010      	b.n	8001af2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <SysTick_Config+0x44>)
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad8:	2301      	movs	r3, #1
 8001ada:	425b      	negs	r3, r3
 8001adc:	2103      	movs	r1, #3
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7ff ff7c 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x44>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x44>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	1c02      	adds	r2, r0, #0
 8001b10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b004      	add	sp, #16
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	0002      	movs	r2, r0
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff ff33 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b002      	add	sp, #8
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff ffaf 	bl	8001ab8 <SysTick_Config>
 8001b5a:	0003      	movs	r3, r0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b002      	add	sp, #8
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b72:	e14f      	b.n	8001e14 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4091      	lsls	r1, r2
 8001b7e:	000a      	movs	r2, r1
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d100      	bne.n	8001b8c <HAL_GPIO_Init+0x28>
 8001b8a:	e140      	b.n	8001e0e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2203      	movs	r2, #3
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d005      	beq.n	8001ba4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d130      	bne.n	8001c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	0013      	movs	r3, r2
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bda:	2201      	movs	r2, #1
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
 8001be0:	0013      	movs	r3, r2
 8001be2:	43da      	mvns	r2, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d017      	beq.n	8001c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	43da      	mvns	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	409a      	lsls	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2203      	movs	r2, #3
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d123      	bne.n	8001c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	58d3      	ldr	r3, [r2, r3]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2207      	movs	r2, #7
 8001c60:	4013      	ands	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	409a      	lsls	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2107      	movs	r1, #7
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	6939      	ldr	r1, [r7, #16]
 8001c94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	23c0      	movs	r3, #192	; 0xc0
 8001cd0:	029b      	lsls	r3, r3, #10
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d100      	bne.n	8001cd8 <HAL_GPIO_Init+0x174>
 8001cd6:	e09a      	b.n	8001e0e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd8:	4b54      	ldr	r3, [pc, #336]	; (8001e2c <HAL_GPIO_Init+0x2c8>)
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_GPIO_Init+0x2c8>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	619a      	str	r2, [r3, #24]
 8001ce4:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <HAL_GPIO_Init+0x2c8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4013      	ands	r3, r2
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf0:	4a4f      	ldr	r2, [pc, #316]	; (8001e30 <HAL_GPIO_Init+0x2cc>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	589b      	ldr	r3, [r3, r2]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2203      	movs	r2, #3
 8001d02:	4013      	ands	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	2390      	movs	r3, #144	; 0x90
 8001d18:	05db      	lsls	r3, r3, #23
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x1e2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a44      	ldr	r2, [pc, #272]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x1de>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a43      	ldr	r2, [pc, #268]	; (8001e38 <HAL_GPIO_Init+0x2d4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x1da>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <HAL_GPIO_Init+0x2d8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x1d6>
 8001d36:	2303      	movs	r3, #3
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x1e4>
 8001d3a:	2305      	movs	r3, #5
 8001d3c:	e004      	b.n	8001d48 <HAL_GPIO_Init+0x1e4>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_Init+0x1e4>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x1e4>
 8001d46:	2300      	movs	r3, #0
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	4093      	lsls	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d58:	4935      	ldr	r1, [pc, #212]	; (8001e30 <HAL_GPIO_Init+0x2cc>)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <HAL_GPIO_Init+0x2dc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	025b      	lsls	r3, r3, #9
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_GPIO_Init+0x2dc>)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_GPIO_Init+0x2dc>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	4013      	ands	r3, r2
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_GPIO_Init+0x2dc>)
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_GPIO_Init+0x2dc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	035b      	lsls	r3, r3, #13
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_GPIO_Init+0x2dc>)
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_GPIO_Init+0x2dc>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43da      	mvns	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	039b      	lsls	r3, r3, #14
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_GPIO_Init+0x2dc>)
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	40da      	lsrs	r2, r3
 8001e1c:	1e13      	subs	r3, r2, #0
 8001e1e:	d000      	beq.n	8001e22 <HAL_GPIO_Init+0x2be>
 8001e20:	e6a8      	b.n	8001b74 <HAL_GPIO_Init+0x10>
  } 
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b006      	add	sp, #24
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010000 	.word	0x40010000
 8001e34:	48000400 	.word	0x48000400
 8001e38:	48000800 	.word	0x48000800
 8001e3c:	48000c00 	.word	0x48000c00
 8001e40:	40010400 	.word	0x40010400

08001e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	000a      	movs	r2, r1
 8001e4e:	1cbb      	adds	r3, r7, #2
 8001e50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	1cba      	adds	r2, r7, #2
 8001e58:	8812      	ldrh	r2, [r2, #0]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d004      	beq.n	8001e68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e5e:	230f      	movs	r3, #15
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e003      	b.n	8001e70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e68:	230f      	movs	r3, #15
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e70:	230f      	movs	r3, #15
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	781b      	ldrb	r3, [r3, #0]
  }
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b004      	add	sp, #16
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	0008      	movs	r0, r1
 8001e88:	0011      	movs	r1, r2
 8001e8a:	1cbb      	adds	r3, r7, #2
 8001e8c:	1c02      	adds	r2, r0, #0
 8001e8e:	801a      	strh	r2, [r3, #0]
 8001e90:	1c7b      	adds	r3, r7, #1
 8001e92:	1c0a      	adds	r2, r1, #0
 8001e94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e96:	1c7b      	adds	r3, r7, #1
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e9e:	1cbb      	adds	r3, r7, #2
 8001ea0:	881a      	ldrh	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea6:	e003      	b.n	8001eb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea8:	1cbb      	adds	r3, r7, #2
 8001eaa:	881a      	ldrh	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b002      	add	sp, #8
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	000a      	movs	r2, r1
 8001ec2:	1cbb      	adds	r3, r7, #2
 8001ec4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ecc:	1cbb      	adds	r3, r7, #2
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	041a      	lsls	r2, r3, #16
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	1cb9      	adds	r1, r7, #2
 8001edc:	8809      	ldrh	r1, [r1, #0]
 8001ede:	400b      	ands	r3, r1
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	619a      	str	r2, [r3, #24]
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b004      	add	sp, #16
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	1dbb      	adds	r3, r7, #6
 8001efa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	1dba      	adds	r2, r7, #6
 8001f02:	8812      	ldrh	r2, [r2, #0]
 8001f04:	4013      	ands	r3, r2
 8001f06:	d008      	beq.n	8001f1a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001f0a:	1dba      	adds	r2, r7, #6
 8001f0c:	8812      	ldrh	r2, [r2, #0]
 8001f0e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f10:	1dbb      	adds	r3, r7, #6
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7fe fdd9 	bl	8000acc <HAL_GPIO_EXTI_Callback>
  }
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b002      	add	sp, #8
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	40010400 	.word	0x40010400

08001f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e301      	b.n	800253e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4013      	ands	r3, r2
 8001f42:	d100      	bne.n	8001f46 <HAL_RCC_OscConfig+0x1e>
 8001f44:	e08d      	b.n	8002062 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f46:	4bc3      	ldr	r3, [pc, #780]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d00e      	beq.n	8001f70 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f52:	4bc0      	ldr	r3, [pc, #768]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	220c      	movs	r2, #12
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x64>
 8001f5e:	4bbd      	ldr	r3, [pc, #756]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	401a      	ands	r2, r3
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	025b      	lsls	r3, r3, #9
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d10d      	bne.n	8001f8c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	4bb8      	ldr	r3, [pc, #736]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x56>
 8001f7c:	e070      	b.n	8002060 <HAL_RCC_OscConfig+0x138>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d000      	beq.n	8001f88 <HAL_RCC_OscConfig+0x60>
 8001f86:	e06b      	b.n	8002060 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e2d8      	b.n	800253e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x7c>
 8001f94:	4baf      	ldr	r3, [pc, #700]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4bae      	ldr	r3, [pc, #696]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	0249      	lsls	r1, r1, #9
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e02f      	b.n	8002004 <HAL_RCC_OscConfig+0xdc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x9e>
 8001fac:	4ba9      	ldr	r3, [pc, #676]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4ba8      	ldr	r3, [pc, #672]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	49a9      	ldr	r1, [pc, #676]	; (8002258 <HAL_RCC_OscConfig+0x330>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	4ba6      	ldr	r3, [pc, #664]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4ba5      	ldr	r3, [pc, #660]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	49a7      	ldr	r1, [pc, #668]	; (800225c <HAL_RCC_OscConfig+0x334>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e01e      	b.n	8002004 <HAL_RCC_OscConfig+0xdc>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d10e      	bne.n	8001fec <HAL_RCC_OscConfig+0xc4>
 8001fce:	4ba1      	ldr	r3, [pc, #644]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	02c9      	lsls	r1, r1, #11
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	4b9d      	ldr	r3, [pc, #628]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b9c      	ldr	r3, [pc, #624]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	0249      	lsls	r1, r1, #9
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xdc>
 8001fec:	4b99      	ldr	r3, [pc, #612]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b98      	ldr	r3, [pc, #608]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	4999      	ldr	r1, [pc, #612]	; (8002258 <HAL_RCC_OscConfig+0x330>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	4b96      	ldr	r3, [pc, #600]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b95      	ldr	r3, [pc, #596]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	4997      	ldr	r1, [pc, #604]	; (800225c <HAL_RCC_OscConfig+0x334>)
 8002000:	400a      	ands	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d014      	beq.n	8002036 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe ff74 	bl	8000ef8 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002016:	f7fe ff6f 	bl	8000ef8 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b64      	cmp	r3, #100	; 0x64
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e28a      	b.n	800253e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002028:	4b8a      	ldr	r3, [pc, #552]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	4013      	ands	r3, r2
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0xee>
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7fe ff5f 	bl	8000ef8 <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002040:	f7fe ff5a 	bl	8000ef8 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e275      	b.n	800253e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	4b80      	ldr	r3, [pc, #512]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	029b      	lsls	r3, r3, #10
 800205a:	4013      	ands	r3, r2
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x118>
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d100      	bne.n	800206e <HAL_RCC_OscConfig+0x146>
 800206c:	e069      	b.n	8002142 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800206e:	4b79      	ldr	r3, [pc, #484]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	220c      	movs	r2, #12
 8002074:	4013      	ands	r3, r2
 8002076:	d00b      	beq.n	8002090 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002078:	4b76      	ldr	r3, [pc, #472]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	220c      	movs	r2, #12
 800207e:	4013      	ands	r3, r2
 8002080:	2b08      	cmp	r3, #8
 8002082:	d11c      	bne.n	80020be <HAL_RCC_OscConfig+0x196>
 8002084:	4b73      	ldr	r3, [pc, #460]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	025b      	lsls	r3, r3, #9
 800208c:	4013      	ands	r3, r2
 800208e:	d116      	bne.n	80020be <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002090:	4b70      	ldr	r3, [pc, #448]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2202      	movs	r2, #2
 8002096:	4013      	ands	r3, r2
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x17e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e24b      	b.n	800253e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b6b      	ldr	r3, [pc, #428]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	22f8      	movs	r2, #248	; 0xf8
 80020ac:	4393      	bics	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	00da      	lsls	r2, r3, #3
 80020b6:	4b67      	ldr	r3, [pc, #412]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020bc:	e041      	b.n	8002142 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d024      	beq.n	8002110 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c6:	4b63      	ldr	r3, [pc, #396]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b62      	ldr	r3, [pc, #392]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80020cc:	2101      	movs	r1, #1
 80020ce:	430a      	orrs	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7fe ff11 	bl	8000ef8 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020dc:	f7fe ff0c 	bl	8000ef8 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e227      	b.n	800253e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b59      	ldr	r3, [pc, #356]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2202      	movs	r2, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d0f1      	beq.n	80020dc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f8:	4b56      	ldr	r3, [pc, #344]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	22f8      	movs	r2, #248	; 0xf8
 80020fe:	4393      	bics	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00da      	lsls	r2, r3, #3
 8002108:	4b52      	ldr	r3, [pc, #328]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e018      	b.n	8002142 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002110:	4b50      	ldr	r3, [pc, #320]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8002116:	2101      	movs	r1, #1
 8002118:	438a      	bics	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe feec 	bl	8000ef8 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002126:	f7fe fee7 	bl	8000ef8 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e202      	b.n	800253e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002138:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2202      	movs	r2, #2
 800213e:	4013      	ands	r3, r2
 8002140:	d1f1      	bne.n	8002126 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2208      	movs	r2, #8
 8002148:	4013      	ands	r3, r2
 800214a:	d036      	beq.n	80021ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d019      	beq.n	8002188 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002154:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8002156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002158:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 800215a:	2101      	movs	r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002160:	f7fe feca 	bl	8000ef8 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216a:	f7fe fec5 	bl	8000ef8 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e1e0      	b.n	800253e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217c:	4b35      	ldr	r3, [pc, #212]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	2202      	movs	r2, #2
 8002182:	4013      	ands	r3, r2
 8002184:	d0f1      	beq.n	800216a <HAL_RCC_OscConfig+0x242>
 8002186:	e018      	b.n	80021ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 800218a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800218c:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 800218e:	2101      	movs	r1, #1
 8002190:	438a      	bics	r2, r1
 8002192:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002194:	f7fe feb0 	bl	8000ef8 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219e:	f7fe feab 	bl	8000ef8 <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1c6      	b.n	800253e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	4b28      	ldr	r3, [pc, #160]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d1f1      	bne.n	800219e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2204      	movs	r2, #4
 80021c0:	4013      	ands	r3, r2
 80021c2:	d100      	bne.n	80021c6 <HAL_RCC_OscConfig+0x29e>
 80021c4:	e0b4      	b.n	8002330 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c6:	201f      	movs	r0, #31
 80021c8:	183b      	adds	r3, r7, r0
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	055b      	lsls	r3, r3, #21
 80021d6:	4013      	ands	r3, r2
 80021d8:	d110      	bne.n	80021fc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	0549      	lsls	r1, r1, #21
 80021e4:	430a      	orrs	r2, r1
 80021e6:	61da      	str	r2, [r3, #28]
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	055b      	lsls	r3, r3, #21
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021f6:	183b      	adds	r3, r7, r0
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_RCC_OscConfig+0x338>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4013      	ands	r3, r2
 8002206:	d11a      	bne.n	800223e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_RCC_OscConfig+0x338>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_RCC_OscConfig+0x338>)
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	0049      	lsls	r1, r1, #1
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7fe fe6f 	bl	8000ef8 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002220:	f7fe fe6a 	bl	8000ef8 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e185      	b.n	800253e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_OscConfig+0x338>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4013      	ands	r3, r2
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10e      	bne.n	8002264 <HAL_RCC_OscConfig+0x33c>
 8002246:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	4b02      	ldr	r3, [pc, #8]	; (8002254 <HAL_RCC_OscConfig+0x32c>)
 800224c:	2101      	movs	r1, #1
 800224e:	430a      	orrs	r2, r1
 8002250:	621a      	str	r2, [r3, #32]
 8002252:	e035      	b.n	80022c0 <HAL_RCC_OscConfig+0x398>
 8002254:	40021000 	.word	0x40021000
 8002258:	fffeffff 	.word	0xfffeffff
 800225c:	fffbffff 	.word	0xfffbffff
 8002260:	40007000 	.word	0x40007000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10c      	bne.n	8002286 <HAL_RCC_OscConfig+0x35e>
 800226c:	4bb6      	ldr	r3, [pc, #728]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	4bb5      	ldr	r3, [pc, #724]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002272:	2101      	movs	r1, #1
 8002274:	438a      	bics	r2, r1
 8002276:	621a      	str	r2, [r3, #32]
 8002278:	4bb3      	ldr	r3, [pc, #716]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 800227a:	6a1a      	ldr	r2, [r3, #32]
 800227c:	4bb2      	ldr	r3, [pc, #712]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 800227e:	2104      	movs	r1, #4
 8002280:	438a      	bics	r2, r1
 8002282:	621a      	str	r2, [r3, #32]
 8002284:	e01c      	b.n	80022c0 <HAL_RCC_OscConfig+0x398>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x380>
 800228e:	4bae      	ldr	r3, [pc, #696]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002290:	6a1a      	ldr	r2, [r3, #32]
 8002292:	4bad      	ldr	r3, [pc, #692]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002294:	2104      	movs	r1, #4
 8002296:	430a      	orrs	r2, r1
 8002298:	621a      	str	r2, [r3, #32]
 800229a:	4bab      	ldr	r3, [pc, #684]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	4baa      	ldr	r3, [pc, #680]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	430a      	orrs	r2, r1
 80022a4:	621a      	str	r2, [r3, #32]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0x398>
 80022a8:	4ba7      	ldr	r3, [pc, #668]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80022aa:	6a1a      	ldr	r2, [r3, #32]
 80022ac:	4ba6      	ldr	r3, [pc, #664]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80022ae:	2101      	movs	r1, #1
 80022b0:	438a      	bics	r2, r1
 80022b2:	621a      	str	r2, [r3, #32]
 80022b4:	4ba4      	ldr	r3, [pc, #656]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	4ba3      	ldr	r3, [pc, #652]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80022ba:	2104      	movs	r1, #4
 80022bc:	438a      	bics	r2, r1
 80022be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d014      	beq.n	80022f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7fe fe16 	bl	8000ef8 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	e009      	b.n	80022e6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fe11 	bl	8000ef8 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	4a9b      	ldr	r2, [pc, #620]	; (800254c <HAL_RCC_OscConfig+0x624>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e12b      	b.n	800253e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e6:	4b98      	ldr	r3, [pc, #608]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	2202      	movs	r2, #2
 80022ec:	4013      	ands	r3, r2
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x3aa>
 80022f0:	e013      	b.n	800231a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fe01 	bl	8000ef8 <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fa:	e009      	b.n	8002310 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe fdfc 	bl	8000ef8 <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	4a91      	ldr	r2, [pc, #580]	; (800254c <HAL_RCC_OscConfig+0x624>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e116      	b.n	800253e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	4b8d      	ldr	r3, [pc, #564]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	2202      	movs	r2, #2
 8002316:	4013      	ands	r3, r2
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800231a:	231f      	movs	r3, #31
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002324:	4b88      	ldr	r3, [pc, #544]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	4b87      	ldr	r3, [pc, #540]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 800232a:	4989      	ldr	r1, [pc, #548]	; (8002550 <HAL_RCC_OscConfig+0x628>)
 800232c:	400a      	ands	r2, r1
 800232e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2210      	movs	r2, #16
 8002336:	4013      	ands	r3, r2
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d12a      	bne.n	8002398 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002342:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002346:	4b80      	ldr	r3, [pc, #512]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002348:	2104      	movs	r1, #4
 800234a:	430a      	orrs	r2, r1
 800234c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800234e:	4b7e      	ldr	r3, [pc, #504]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002352:	4b7d      	ldr	r3, [pc, #500]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002354:	2101      	movs	r1, #1
 8002356:	430a      	orrs	r2, r1
 8002358:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235a:	f7fe fdcd 	bl	8000ef8 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002364:	f7fe fdc8 	bl	8000ef8 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0e3      	b.n	800253e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002376:	4b74      	ldr	r3, [pc, #464]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	2202      	movs	r2, #2
 800237c:	4013      	ands	r3, r2
 800237e:	d0f1      	beq.n	8002364 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002380:	4b71      	ldr	r3, [pc, #452]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	22f8      	movs	r2, #248	; 0xf8
 8002386:	4393      	bics	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	00da      	lsls	r2, r3, #3
 8002390:	4b6d      	ldr	r3, [pc, #436]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002392:	430a      	orrs	r2, r1
 8002394:	635a      	str	r2, [r3, #52]	; 0x34
 8002396:	e034      	b.n	8002402 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	3305      	adds	r3, #5
 800239e:	d111      	bne.n	80023c4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023a0:	4b69      	ldr	r3, [pc, #420]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80023a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80023a6:	2104      	movs	r1, #4
 80023a8:	438a      	bics	r2, r1
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023ac:	4b66      	ldr	r3, [pc, #408]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80023ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b0:	22f8      	movs	r2, #248	; 0xf8
 80023b2:	4393      	bics	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	00da      	lsls	r2, r3, #3
 80023bc:	4b62      	ldr	r3, [pc, #392]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	635a      	str	r2, [r3, #52]	; 0x34
 80023c2:	e01e      	b.n	8002402 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023c4:	4b60      	ldr	r3, [pc, #384]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80023c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c8:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80023ca:	2104      	movs	r1, #4
 80023cc:	430a      	orrs	r2, r1
 80023ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023d0:	4b5d      	ldr	r3, [pc, #372]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80023d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d4:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	438a      	bics	r2, r1
 80023da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023dc:	f7fe fd8c 	bl	8000ef8 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023e6:	f7fe fd87 	bl	8000ef8 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0a2      	b.n	800253e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80023fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fc:	2202      	movs	r2, #2
 80023fe:	4013      	ands	r3, r2
 8002400:	d1f1      	bne.n	80023e6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d100      	bne.n	800240c <HAL_RCC_OscConfig+0x4e4>
 800240a:	e097      	b.n	800253c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240c:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	220c      	movs	r2, #12
 8002412:	4013      	ands	r3, r2
 8002414:	2b08      	cmp	r3, #8
 8002416:	d100      	bne.n	800241a <HAL_RCC_OscConfig+0x4f2>
 8002418:	e06b      	b.n	80024f2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d14c      	bne.n	80024bc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b49      	ldr	r3, [pc, #292]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b48      	ldr	r3, [pc, #288]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002428:	494a      	ldr	r1, [pc, #296]	; (8002554 <HAL_RCC_OscConfig+0x62c>)
 800242a:	400a      	ands	r2, r1
 800242c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7fe fd63 	bl	8000ef8 <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fd5e 	bl	8000ef8 <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e079      	b.n	800253e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244a:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	049b      	lsls	r3, r3, #18
 8002452:	4013      	ands	r3, r2
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002456:	4b3c      	ldr	r3, [pc, #240]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	220f      	movs	r2, #15
 800245c:	4393      	bics	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	4b38      	ldr	r3, [pc, #224]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002466:	430a      	orrs	r2, r1
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4a3a      	ldr	r2, [pc, #232]	; (8002558 <HAL_RCC_OscConfig+0x630>)
 8002470:	4013      	ands	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	431a      	orrs	r2, r3
 800247e:	4b32      	ldr	r3, [pc, #200]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	0449      	lsls	r1, r1, #17
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7fe fd31 	bl	8000ef8 <HAL_GetTick>
 8002496:	0003      	movs	r3, r0
 8002498:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe fd2c 	bl	8000ef8 <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e047      	b.n	800253e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	049b      	lsls	r3, r3, #18
 80024b6:	4013      	ands	r3, r2
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x574>
 80024ba:	e03f      	b.n	800253c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80024c2:	4924      	ldr	r1, [pc, #144]	; (8002554 <HAL_RCC_OscConfig+0x62c>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fd16 	bl	8000ef8 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe fd11 	bl	8000ef8 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e02c      	b.n	800253e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	049b      	lsls	r3, r3, #18
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x5aa>
 80024f0:	e024      	b.n	800253c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e01f      	b.n	800253e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_RCC_OscConfig+0x620>)
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	025b      	lsls	r3, r3, #9
 8002510:	401a      	ands	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	429a      	cmp	r2, r3
 8002518:	d10e      	bne.n	8002538 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	220f      	movs	r2, #15
 800251e:	401a      	ands	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d107      	bne.n	8002538 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	23f0      	movs	r3, #240	; 0xf0
 800252c:	039b      	lsls	r3, r3, #14
 800252e:	401a      	ands	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b008      	add	sp, #32
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	40021000 	.word	0x40021000
 800254c:	00001388 	.word	0x00001388
 8002550:	efffffff 	.word	0xefffffff
 8002554:	feffffff 	.word	0xfeffffff
 8002558:	ffc2ffff 	.word	0xffc2ffff

0800255c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b3      	b.n	80026d8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <HAL_RCC_ClockConfig+0x184>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2201      	movs	r2, #1
 8002576:	4013      	ands	r3, r2
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d911      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <HAL_RCC_ClockConfig+0x184>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	4393      	bics	r3, r2
 8002586:	0019      	movs	r1, r3
 8002588:	4b55      	ldr	r3, [pc, #340]	; (80026e0 <HAL_RCC_ClockConfig+0x184>)
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002590:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_ClockConfig+0x184>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e09a      	b.n	80026d8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2202      	movs	r2, #2
 80025a8:	4013      	ands	r3, r2
 80025aa:	d015      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2204      	movs	r2, #4
 80025b2:	4013      	ands	r3, r2
 80025b4:	d006      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025b6:	4b4b      	ldr	r3, [pc, #300]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 80025bc:	21e0      	movs	r1, #224	; 0xe0
 80025be:	00c9      	lsls	r1, r1, #3
 80025c0:	430a      	orrs	r2, r1
 80025c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	22f0      	movs	r2, #240	; 0xf0
 80025ca:	4393      	bics	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 80025d4:	430a      	orrs	r2, r1
 80025d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	d040      	beq.n	8002664 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	029b      	lsls	r3, r3, #10
 80025f2:	4013      	ands	r3, r2
 80025f4:	d114      	bne.n	8002620 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06e      	b.n	80026d8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	049b      	lsls	r3, r3, #18
 800260a:	4013      	ands	r3, r2
 800260c:	d108      	bne.n	8002620 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e062      	b.n	80026d8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2202      	movs	r2, #2
 8002618:	4013      	ands	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e05b      	b.n	80026d8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2203      	movs	r2, #3
 8002626:	4393      	bics	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 8002630:	430a      	orrs	r2, r1
 8002632:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002634:	f7fe fc60 	bl	8000ef8 <HAL_GetTick>
 8002638:	0003      	movs	r3, r0
 800263a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263c:	e009      	b.n	8002652 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263e:	f7fe fc5b 	bl	8000ef8 <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <HAL_RCC_ClockConfig+0x18c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e042      	b.n	80026d8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	220c      	movs	r2, #12
 8002658:	401a      	ands	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1ec      	bne.n	800263e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <HAL_RCC_ClockConfig+0x184>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d211      	bcs.n	8002696 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_RCC_ClockConfig+0x184>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	4393      	bics	r3, r2
 800267a:	0019      	movs	r1, r3
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_RCC_ClockConfig+0x184>)
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <HAL_RCC_ClockConfig+0x184>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2201      	movs	r2, #1
 800268a:	4013      	ands	r3, r2
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e020      	b.n	80026d8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2204      	movs	r2, #4
 800269c:	4013      	ands	r3, r2
 800269e:	d009      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a11      	ldr	r2, [pc, #68]	; (80026ec <HAL_RCC_ClockConfig+0x190>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 80026b0:	430a      	orrs	r2, r1
 80026b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026b4:	f000 f820 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026b8:	0001      	movs	r1, r0
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x188>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	220f      	movs	r2, #15
 80026c2:	4013      	ands	r3, r2
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x194>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	000a      	movs	r2, r1
 80026ca:	40da      	lsrs	r2, r3
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x198>)
 80026ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026d0:	2003      	movs	r0, #3
 80026d2:	f7fe fbcb 	bl	8000e6c <HAL_InitTick>
  
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b004      	add	sp, #16
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40022000 	.word	0x40022000
 80026e4:	40021000 	.word	0x40021000
 80026e8:	00001388 	.word	0x00001388
 80026ec:	fffff8ff 	.word	0xfffff8ff
 80026f0:	080030dc 	.word	0x080030dc
 80026f4:	20000000 	.word	0x20000000

080026f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b08f      	sub	sp, #60	; 0x3c
 80026fc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026fe:	2314      	movs	r3, #20
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002704:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002706:	c313      	stmia	r3!, {r0, r1, r4}
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002710:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002712:	c313      	stmia	r3!, {r0, r1, r4}
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800271c:	2300      	movs	r3, #0
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002720:	2300      	movs	r3, #0
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
 8002724:	2300      	movs	r3, #0
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800272c:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	220c      	movs	r2, #12
 8002736:	4013      	ands	r3, r2
 8002738:	2b04      	cmp	r3, #4
 800273a:	d002      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x4a>
 800273c:	2b08      	cmp	r3, #8
 800273e:	d003      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x50>
 8002740:	e02d      	b.n	800279e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002746:	e02d      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	0c9b      	lsrs	r3, r3, #18
 800274c:	220f      	movs	r2, #15
 800274e:	4013      	ands	r3, r2
 8002750:	2214      	movs	r2, #20
 8002752:	18ba      	adds	r2, r7, r2
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	220f      	movs	r2, #15
 800275e:	4013      	ands	r3, r2
 8002760:	1d3a      	adds	r2, r7, #4
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	025b      	lsls	r3, r3, #9
 800276c:	4013      	ands	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002772:	4812      	ldr	r0, [pc, #72]	; (80027bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002774:	f7fd fcc8 	bl	8000108 <__udivsi3>
 8002778:	0003      	movs	r3, r0
 800277a:	001a      	movs	r2, r3
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	4353      	muls	r3, r2
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
 8002782:	e009      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002786:	000a      	movs	r2, r1
 8002788:	0152      	lsls	r2, r2, #5
 800278a:	1a52      	subs	r2, r2, r1
 800278c:	0193      	lsls	r3, r2, #6
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	185b      	adds	r3, r3, r1
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800279c:	e002      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027a6:	0018      	movs	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b00f      	add	sp, #60	; 0x3c
 80027ac:	bd90      	pop	{r4, r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	080030bc 	.word	0x080030bc
 80027b4:	080030cc 	.word	0x080030cc
 80027b8:	40021000 	.word	0x40021000
 80027bc:	007a1200 	.word	0x007a1200

080027c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e042      	b.n	8002858 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	223d      	movs	r2, #61	; 0x3d
 80027d6:	5c9b      	ldrb	r3, [r3, r2]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d107      	bne.n	80027ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223c      	movs	r2, #60	; 0x3c
 80027e2:	2100      	movs	r1, #0
 80027e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7fe fa85 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223d      	movs	r2, #61	; 0x3d
 80027f2:	2102      	movs	r1, #2
 80027f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	0019      	movs	r1, r3
 8002800:	0010      	movs	r0, r2
 8002802:	f000 fabb 	bl	8002d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2246      	movs	r2, #70	; 0x46
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	223e      	movs	r2, #62	; 0x3e
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	223f      	movs	r2, #63	; 0x3f
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2240      	movs	r2, #64	; 0x40
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2241      	movs	r2, #65	; 0x41
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2242      	movs	r2, #66	; 0x42
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2243      	movs	r2, #67	; 0x43
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2244      	movs	r2, #68	; 0x44
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2245      	movs	r2, #69	; 0x45
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	223d      	movs	r2, #61	; 0x3d
 8002852:	2101      	movs	r1, #1
 8002854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	b002      	add	sp, #8
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	223d      	movs	r2, #61	; 0x3d
 800286c:	5c9b      	ldrb	r3, [r3, r2]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d001      	beq.n	8002878 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e028      	b.n	80028ca <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	223d      	movs	r2, #61	; 0x3d
 800287c:	2102      	movs	r1, #2
 800287e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <HAL_TIM_Base_Start+0x74>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_TIM_Base_Start+0x34>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <HAL_TIM_Base_Start+0x78>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2207      	movs	r2, #7
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d010      	beq.n	80028c8 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2101      	movs	r1, #1
 80028b2:	430a      	orrs	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b6:	e007      	b.n	80028c8 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2101      	movs	r1, #1
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40000400 	.word	0x40000400

080028dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	223d      	movs	r2, #61	; 0x3d
 80028e8:	5c9b      	ldrb	r3, [r3, r2]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e030      	b.n	8002956 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	223d      	movs	r2, #61	; 0x3d
 80028f8:	2102      	movs	r1, #2
 80028fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a13      	ldr	r2, [pc, #76]	; (8002960 <HAL_TIM_Base_Start_IT+0x84>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x44>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a12      	ldr	r2, [pc, #72]	; (8002964 <HAL_TIM_Base_Start_IT+0x88>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d111      	bne.n	8002944 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2207      	movs	r2, #7
 8002928:	4013      	ands	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b06      	cmp	r3, #6
 8002930:	d010      	beq.n	8002954 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2101      	movs	r1, #1
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002942:	e007      	b.n	8002954 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2101      	movs	r1, #1
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40000400 	.word	0x40000400

08002968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d124      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2202      	movs	r2, #2
 8002986:	4013      	ands	r3, r2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d11d      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2203      	movs	r2, #3
 8002992:	4252      	negs	r2, r2
 8002994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2203      	movs	r2, #3
 80029a4:	4013      	ands	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f9ce 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 80029b0:	e007      	b.n	80029c2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 f9c1 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 f9cd 	bl	8002d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2204      	movs	r2, #4
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d125      	bne.n	8002a22 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2204      	movs	r2, #4
 80029de:	4013      	ands	r3, r2
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d11e      	bne.n	8002a22 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2205      	movs	r2, #5
 80029ea:	4252      	negs	r2, r2
 80029ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	23c0      	movs	r3, #192	; 0xc0
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4013      	ands	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 f9a1 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 8002a0a:	e007      	b.n	8002a1c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 f994 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 f9a0 	bl	8002d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2208      	movs	r2, #8
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d124      	bne.n	8002a7a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2208      	movs	r2, #8
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d11d      	bne.n	8002a7a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2209      	movs	r2, #9
 8002a44:	4252      	negs	r2, r2
 8002a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2203      	movs	r2, #3
 8002a56:	4013      	ands	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 f975 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 8002a62:	e007      	b.n	8002a74 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f968 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 f974 	bl	8002d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2210      	movs	r2, #16
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d125      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2210      	movs	r2, #16
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d11e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2211      	movs	r2, #17
 8002a9c:	4252      	negs	r2, r2
 8002a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	23c0      	movs	r3, #192	; 0xc0
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f948 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 8002abc:	e007      	b.n	8002ace <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 f93b 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 f947 	bl	8002d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10f      	bne.n	8002b02 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d108      	bne.n	8002b02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2202      	movs	r2, #2
 8002af6:	4252      	negs	r2, r2
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7fd fb8f 	bl	8000220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d10f      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d108      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2281      	movs	r2, #129	; 0x81
 8002b24:	4252      	negs	r2, r2
 8002b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 fa86 	bl	800303c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2240      	movs	r2, #64	; 0x40
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d10f      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2240      	movs	r2, #64	; 0x40
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d108      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2241      	movs	r2, #65	; 0x41
 8002b52:	4252      	negs	r2, r2
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 f907 	bl	8002d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2220      	movs	r2, #32
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d10f      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d108      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2221      	movs	r2, #33	; 0x21
 8002b80:	4252      	negs	r2, r2
 8002b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 fa50 	bl	800302c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	230f      	movs	r3, #15
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	223c      	movs	r2, #60	; 0x3c
 8002baa:	5c9b      	ldrb	r3, [r3, r2]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIM_ConfigClockSource+0x20>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e0bc      	b.n	8002d2e <HAL_TIM_ConfigClockSource+0x19a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	223c      	movs	r2, #60	; 0x3c
 8002bb8:	2101      	movs	r1, #1
 8002bba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	223d      	movs	r2, #61	; 0x3d
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2277      	movs	r2, #119	; 0x77
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	0192      	lsls	r2, r2, #6
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d040      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0xde>
 8002bf0:	2280      	movs	r2, #128	; 0x80
 8002bf2:	0192      	lsls	r2, r2, #6
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d900      	bls.n	8002bfa <HAL_TIM_ConfigClockSource+0x66>
 8002bf8:	e088      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002bfa:	2280      	movs	r2, #128	; 0x80
 8002bfc:	0152      	lsls	r2, r2, #5
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d100      	bne.n	8002c04 <HAL_TIM_ConfigClockSource+0x70>
 8002c02:	e088      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x182>
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	0152      	lsls	r2, r2, #5
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d900      	bls.n	8002c0e <HAL_TIM_ConfigClockSource+0x7a>
 8002c0c:	e07e      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c0e:	2b70      	cmp	r3, #112	; 0x70
 8002c10:	d018      	beq.n	8002c44 <HAL_TIM_ConfigClockSource+0xb0>
 8002c12:	d900      	bls.n	8002c16 <HAL_TIM_ConfigClockSource+0x82>
 8002c14:	e07a      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c16:	2b60      	cmp	r3, #96	; 0x60
 8002c18:	d04f      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x126>
 8002c1a:	d900      	bls.n	8002c1e <HAL_TIM_ConfigClockSource+0x8a>
 8002c1c:	e076      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c1e:	2b50      	cmp	r3, #80	; 0x50
 8002c20:	d03b      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x106>
 8002c22:	d900      	bls.n	8002c26 <HAL_TIM_ConfigClockSource+0x92>
 8002c24:	e072      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	d057      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x146>
 8002c2a:	d900      	bls.n	8002c2e <HAL_TIM_ConfigClockSource+0x9a>
 8002c2c:	e06e      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c2e:	2b30      	cmp	r3, #48	; 0x30
 8002c30:	d063      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x166>
 8002c32:	d86b      	bhi.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d060      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x166>
 8002c38:	d868      	bhi.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d05d      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x166>
 8002c3e:	2b10      	cmp	r3, #16
 8002c40:	d05b      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x166>
 8002c42:	e063      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f000 f978 	bl	8002f48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2277      	movs	r2, #119	; 0x77
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	609a      	str	r2, [r3, #8]
      break;
 8002c70:	e052      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f000 f961 	bl	8002f48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	01c9      	lsls	r1, r1, #7
 8002c94:	430a      	orrs	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]
      break;
 8002c98:	e03e      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	f000 f8d4 	bl	8002e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2150      	movs	r1, #80	; 0x50
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f92e 	bl	8002f14 <TIM_ITRx_SetConfig>
      break;
 8002cb8:	e02e      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6859      	ldr	r1, [r3, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	f000 f8f2 	bl	8002eb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2160      	movs	r1, #96	; 0x60
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 f91e 	bl	8002f14 <TIM_ITRx_SetConfig>
      break;
 8002cd8:	e01e      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	f000 f8b4 	bl	8002e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2140      	movs	r1, #64	; 0x40
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 f90e 	bl	8002f14 <TIM_ITRx_SetConfig>
      break;
 8002cf8:	e00e      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0019      	movs	r1, r3
 8002d04:	0010      	movs	r0, r2
 8002d06:	f000 f905 	bl	8002f14 <TIM_ITRx_SetConfig>
      break;
 8002d0a:	e005      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d0c:	230f      	movs	r3, #15
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
      break;
 8002d14:	e000      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d16:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	223d      	movs	r2, #61	; 0x3d
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	223c      	movs	r2, #60	; 0x3c
 8002d24:	2100      	movs	r1, #0
 8002d26:	5499      	strb	r1, [r3, r2]

  return status;
 8002d28:	230f      	movs	r3, #15
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	781b      	ldrb	r3, [r3, #0]
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b004      	add	sp, #16
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	ffff00ff 	.word	0xffff00ff

08002d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b002      	add	sp, #8
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a2b      	ldr	r2, [pc, #172]	; (8002e3c <TIM_Base_SetConfig+0xc0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_Base_SetConfig+0x20>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <TIM_Base_SetConfig+0xc4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d108      	bne.n	8002dae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2270      	movs	r2, #112	; 0x70
 8002da0:	4393      	bics	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a22      	ldr	r2, [pc, #136]	; (8002e3c <TIM_Base_SetConfig+0xc0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00f      	beq.n	8002dd6 <TIM_Base_SetConfig+0x5a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a21      	ldr	r2, [pc, #132]	; (8002e40 <TIM_Base_SetConfig+0xc4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00b      	beq.n	8002dd6 <TIM_Base_SetConfig+0x5a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <TIM_Base_SetConfig+0xc8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <TIM_Base_SetConfig+0x5a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <TIM_Base_SetConfig+0xcc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d003      	beq.n	8002dd6 <TIM_Base_SetConfig+0x5a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1e      	ldr	r2, [pc, #120]	; (8002e4c <TIM_Base_SetConfig+0xd0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d108      	bne.n	8002de8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <TIM_Base_SetConfig+0xd4>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	4393      	bics	r3, r2
 8002dee:	001a      	movs	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <TIM_Base_SetConfig+0xc0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <TIM_Base_SetConfig+0xaa>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <TIM_Base_SetConfig+0xcc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d003      	beq.n	8002e26 <TIM_Base_SetConfig+0xaa>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <TIM_Base_SetConfig+0xd0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d103      	bne.n	8002e2e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	615a      	str	r2, [r3, #20]
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b004      	add	sp, #16
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40002000 	.word	0x40002000
 8002e48:	40014400 	.word	0x40014400
 8002e4c:	40014800 	.word	0x40014800
 8002e50:	fffffcff 	.word	0xfffffcff

08002e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	001a      	movs	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	22f0      	movs	r2, #240	; 0xf0
 8002e7e:	4393      	bics	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	220a      	movs	r2, #10
 8002e90:	4393      	bics	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	621a      	str	r2, [r3, #32]
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b006      	add	sp, #24
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <TIM_TI2_ConfigInputStage+0x60>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	031b      	lsls	r3, r3, #12
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	22a0      	movs	r2, #160	; 0xa0
 8002eec:	4393      	bics	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	621a      	str	r2, [r3, #32]
}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b006      	add	sp, #24
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	ffff0fff 	.word	0xffff0fff

08002f14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2270      	movs	r2, #112	; 0x70
 8002f28:	4393      	bics	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	2207      	movs	r2, #7
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	609a      	str	r2, [r3, #8]
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b004      	add	sp, #16
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <TIM_ETR_SetConfig+0x3c>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	021a      	lsls	r2, r3, #8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	609a      	str	r2, [r3, #8]
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b006      	add	sp, #24
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	ffff00ff 	.word	0xffff00ff

08002f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	223c      	movs	r2, #60	; 0x3c
 8002f96:	5c9b      	ldrb	r3, [r3, r2]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e03c      	b.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	223c      	movs	r2, #60	; 0x3c
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	223d      	movs	r2, #61	; 0x3d
 8002fac:	2102      	movs	r1, #2
 8002fae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2270      	movs	r2, #112	; 0x70
 8002fc4:	4393      	bics	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a11      	ldr	r2, [pc, #68]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d10c      	bne.n	8003008 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	4393      	bics	r3, r2
 8002ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	223d      	movs	r2, #61	; 0x3d
 800300c:	2101      	movs	r1, #1
 800300e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	223c      	movs	r2, #60	; 0x3c
 8003014:	2100      	movs	r1, #0
 8003016:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	40012c00 	.word	0x40012c00
 8003028:	40000400 	.word	0x40000400

0800302c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <__libc_init_array>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	2600      	movs	r6, #0
 8003050:	4d0c      	ldr	r5, [pc, #48]	; (8003084 <__libc_init_array+0x38>)
 8003052:	4c0d      	ldr	r4, [pc, #52]	; (8003088 <__libc_init_array+0x3c>)
 8003054:	1b64      	subs	r4, r4, r5
 8003056:	10a4      	asrs	r4, r4, #2
 8003058:	42a6      	cmp	r6, r4
 800305a:	d109      	bne.n	8003070 <__libc_init_array+0x24>
 800305c:	2600      	movs	r6, #0
 800305e:	f000 f821 	bl	80030a4 <_init>
 8003062:	4d0a      	ldr	r5, [pc, #40]	; (800308c <__libc_init_array+0x40>)
 8003064:	4c0a      	ldr	r4, [pc, #40]	; (8003090 <__libc_init_array+0x44>)
 8003066:	1b64      	subs	r4, r4, r5
 8003068:	10a4      	asrs	r4, r4, #2
 800306a:	42a6      	cmp	r6, r4
 800306c:	d105      	bne.n	800307a <__libc_init_array+0x2e>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	00b3      	lsls	r3, r6, #2
 8003072:	58eb      	ldr	r3, [r5, r3]
 8003074:	4798      	blx	r3
 8003076:	3601      	adds	r6, #1
 8003078:	e7ee      	b.n	8003058 <__libc_init_array+0xc>
 800307a:	00b3      	lsls	r3, r6, #2
 800307c:	58eb      	ldr	r3, [r5, r3]
 800307e:	4798      	blx	r3
 8003080:	3601      	adds	r6, #1
 8003082:	e7f2      	b.n	800306a <__libc_init_array+0x1e>
 8003084:	080030ec 	.word	0x080030ec
 8003088:	080030ec 	.word	0x080030ec
 800308c:	080030ec 	.word	0x080030ec
 8003090:	080030f0 	.word	0x080030f0

08003094 <memset>:
 8003094:	0003      	movs	r3, r0
 8003096:	1882      	adds	r2, r0, r2
 8003098:	4293      	cmp	r3, r2
 800309a:	d100      	bne.n	800309e <memset+0xa>
 800309c:	4770      	bx	lr
 800309e:	7019      	strb	r1, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	e7f9      	b.n	8003098 <memset+0x4>

080030a4 <_init>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr

080030b0 <_fini>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr
